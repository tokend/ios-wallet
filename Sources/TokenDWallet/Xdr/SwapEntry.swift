// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct SwapEntry
//  {
//      uint64 id;
//  
//      Hash secretHash;
//  
//      AccountID source;
//      BalanceID sourceBalance;
//  
//      BalanceID destinationBalance;
//  
//      longstring details;
//  
//      uint64 amount;
//  
//      int64 createdAt;
//      int64 lockTime;
//  
//  	uint64 fee;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct SwapEntry: XDRCodable {
  public var id: Uint64
  public var secretHash: Hash
  public var source: AccountID
  public var sourceBalance: BalanceID
  public var destinationBalance: BalanceID
  public var details: Longstring
  public var amount: Uint64
  public var createdAt: Int64
  public var lockTime: Int64
  public var fee: Uint64
  public var ext: EmptyExt

  public init(
      id: Uint64,
      secretHash: Hash,
      source: AccountID,
      sourceBalance: BalanceID,
      destinationBalance: BalanceID,
      details: Longstring,
      amount: Uint64,
      createdAt: Int64,
      lockTime: Int64,
      fee: Uint64,
      ext: EmptyExt) {

    self.id = id
    self.secretHash = secretHash
    self.source = source
    self.sourceBalance = sourceBalance
    self.destinationBalance = destinationBalance
    self.details = details
    self.amount = amount
    self.createdAt = createdAt
    self.lockTime = lockTime
    self.fee = fee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.id.toXDR())
    xdr.append(self.secretHash.toXDR())
    xdr.append(self.source.toXDR())
    xdr.append(self.sourceBalance.toXDR())
    xdr.append(self.destinationBalance.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.createdAt.toXDR())
    xdr.append(self.lockTime.toXDR())
    xdr.append(self.fee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.id = try Uint64(xdrData: &xdrData)
    self.secretHash = try Hash(xdrData: &xdrData)
    self.source = try AccountID(xdrData: &xdrData)
    self.sourceBalance = try BalanceID(xdrData: &xdrData)
    self.destinationBalance = try BalanceID(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.createdAt = try Int64(xdrData: &xdrData)
    self.lockTime = try Int64(xdrData: &xdrData)
    self.fee = try Uint64(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
