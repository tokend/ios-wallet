// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: ManageOfferOp is used to create or delete offer
//  struct ManageOfferOp
//  {
//      //: Balance for base asset of an offer creator
//      BalanceID baseBalance; 
//      
//      //: Balance for quote asset of an offer creator
//      BalanceID quoteBalance; 
//      
//      //: Direction of an offer (to buy or to sell)
//      bool isBuy;
//      
//      //: Amount in base asset to buy or sell (to delete an offer, set 0)
//      int64 amount; 
//      
//      //: Price of base asset in the ratio of quote asset
//      int64 price;
//      
//      //: Fee in quote asset to pay 
//      int64 fee;
//      
//      //: ID of an offer to be managed. 0 to create a new offer, otherwise to edit an existing offer
//      uint64 offerID;
//      
//      //: ID of an orderBook to put an offer in and to find a match in
//      uint64 orderBookID;
//       
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//              void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageOfferOp: XDRCodable {
  public var baseBalance: BalanceID
  public var quoteBalance: BalanceID
  public var isBuy: Bool
  public var amount: Int64
  public var price: Int64
  public var fee: Int64
  public var offerID: Uint64
  public var orderBookID: Uint64
  public var ext: ManageOfferOpExt

  public init(
      baseBalance: BalanceID,
      quoteBalance: BalanceID,
      isBuy: Bool,
      amount: Int64,
      price: Int64,
      fee: Int64,
      offerID: Uint64,
      orderBookID: Uint64,
      ext: ManageOfferOpExt) {

    self.baseBalance = baseBalance
    self.quoteBalance = quoteBalance
    self.isBuy = isBuy
    self.amount = amount
    self.price = price
    self.fee = fee
    self.offerID = offerID
    self.orderBookID = orderBookID
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.baseBalance.toXDR())
    xdr.append(self.quoteBalance.toXDR())
    xdr.append(self.isBuy.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.price.toXDR())
    xdr.append(self.fee.toXDR())
    xdr.append(self.offerID.toXDR())
    xdr.append(self.orderBookID.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.baseBalance = try BalanceID(xdrData: &xdrData)
    self.quoteBalance = try BalanceID(xdrData: &xdrData)
    self.isBuy = try Bool(xdrData: &xdrData)
    self.amount = try Int64(xdrData: &xdrData)
    self.price = try Int64(xdrData: &xdrData)
    self.fee = try Int64(xdrData: &xdrData)
    self.offerID = try Uint64(xdrData: &xdrData)
    self.orderBookID = try Uint64(xdrData: &xdrData)
    self.ext = try ManageOfferOpExt(xdrData: &xdrData)
  }

  public enum ManageOfferOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
