// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LiquidityPoolEntry
//      {
//          //: Unique sequential identifier of the liquidity pool
//          uint64 id;
//  
//          //: Account that holds balances of the liquidity pool
//          AccountID liquidityPoolAccount;
//  
//          //: Asset code of the LP token
//          AssetCode lpTokenAssetCode;
//  
//          //: Balance of first asset
//          BalanceID firstAssetBalance;
//          //: Balance of second asset
//          BalanceID secondAssetBalance;
//  
//          //: Total amount of all LP tokens
//          uint64 lpTokensTotalCap;
//  
//          //: Amount of first asset stored in liquidity pool
//          uint64 firstReserve;
//          //: Amount of second asset stored in liquidity pool
//          uint64 secondReserve;
//  
//          //: Reserved for future usage
//          EmptyExt ext;
//      };

//  ===========================================================================
public struct LiquidityPoolEntry: XDRCodable {
  public var id: Uint64
  public var liquidityPoolAccount: AccountID
  public var lpTokenAssetCode: AssetCode
  public var firstAssetBalance: BalanceID
  public var secondAssetBalance: BalanceID
  public var lpTokensTotalCap: Uint64
  public var firstReserve: Uint64
  public var secondReserve: Uint64
  public var ext: EmptyExt

  public init(
      id: Uint64,
      liquidityPoolAccount: AccountID,
      lpTokenAssetCode: AssetCode,
      firstAssetBalance: BalanceID,
      secondAssetBalance: BalanceID,
      lpTokensTotalCap: Uint64,
      firstReserve: Uint64,
      secondReserve: Uint64,
      ext: EmptyExt) {

    self.id = id
    self.liquidityPoolAccount = liquidityPoolAccount
    self.lpTokenAssetCode = lpTokenAssetCode
    self.firstAssetBalance = firstAssetBalance
    self.secondAssetBalance = secondAssetBalance
    self.lpTokensTotalCap = lpTokensTotalCap
    self.firstReserve = firstReserve
    self.secondReserve = secondReserve
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.id.toXDR())
    xdr.append(self.liquidityPoolAccount.toXDR())
    xdr.append(self.lpTokenAssetCode.toXDR())
    xdr.append(self.firstAssetBalance.toXDR())
    xdr.append(self.secondAssetBalance.toXDR())
    xdr.append(self.lpTokensTotalCap.toXDR())
    xdr.append(self.firstReserve.toXDR())
    xdr.append(self.secondReserve.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.id = try Uint64(xdrData: &xdrData)
    self.liquidityPoolAccount = try AccountID(xdrData: &xdrData)
    self.lpTokenAssetCode = try AssetCode(xdrData: &xdrData)
    self.firstAssetBalance = try BalanceID(xdrData: &xdrData)
    self.secondAssetBalance = try BalanceID(xdrData: &xdrData)
    self.lpTokensTotalCap = try Uint64(xdrData: &xdrData)
    self.firstReserve = try Uint64(xdrData: &xdrData)
    self.secondReserve = try Uint64(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
