// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: PollData is used to pass `PollType` with necessary params
//  union PollData switch (PollType type)
//  {
//  case SINGLE_CHOICE:
//      EmptyExt ext;
//  case CUSTOM_CHOICE:
//  	EmptyExt customChoiceExt;
//  };

//  ===========================================================================
public enum PollData: XDRDiscriminatedUnion {
  case singleChoice(EmptyExt)
  case customChoice(EmptyExt)

  public var discriminant: Int32 {
    switch self {
    case .singleChoice: return PollType.singleChoice.rawValue
    case .customChoice: return PollType.customChoice.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .singleChoice(let data): xdr.append(data.toXDR())
    case .customChoice(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case PollType.singleChoice.rawValue:
      let data = try EmptyExt(xdrData: &xdrData)
      self = .singleChoice(data)
    case PollType.customChoice.rawValue:
      let data = try EmptyExt(xdrData: &xdrData)
      self = .customChoice(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
}
