// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Body of a reviewable RedemptionRequest, contains parameters regarding AML alert
//  struct RedemptionRequest {
//      //: Balance to charge assets from. Balance must be in asset owned by requester.
//      BalanceID sourceBalanceID;
//      //: Account to transfer funds
//      AccountID destination;
//  
//      //: Amount of redemption
//      uint64 amount;
//  
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct RedemptionRequest: XDRCodable {
  public var sourceBalanceID: BalanceID
  public var destination: AccountID
  public var amount: Uint64
  public var creatorDetails: Longstring
  public var ext: RedemptionRequestExt

  public init(
      sourceBalanceID: BalanceID,
      destination: AccountID,
      amount: Uint64,
      creatorDetails: Longstring,
      ext: RedemptionRequestExt) {

    self.sourceBalanceID = sourceBalanceID
    self.destination = destination
    self.amount = amount
    self.creatorDetails = creatorDetails
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.sourceBalanceID.toXDR())
    xdr.append(self.destination.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.sourceBalanceID = try BalanceID(xdrData: &xdrData)
    self.destination = try AccountID(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.creatorDetails = try Longstring(xdrData: &xdrData)
    self.ext = try RedemptionRequestExt(xdrData: &xdrData)
  }

  public enum RedemptionRequestExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
