// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: `PaymentResponse` defines the response on the corresponding PaymentOp
//  struct PaymentResponse {
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalanceID;
//  
//      //: Code of an asset used in payment
//      AssetCode asset;
//      //: Amount sent by the sender
//      uint64 sourceSentUniversal;
//      //: Unique ID of the payment
//      uint64 paymentID;
//  
//      //: Fee charged from the source balance
//      Fee actualSourcePaymentFee;
//      //: Fee charged from the destination balance
//      Fee actualDestinationPaymentFee;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct PaymentResponse: XDRCodable {
  public var destination: AccountID
  public var destinationBalanceID: BalanceID
  public var asset: AssetCode
  public var sourceSentUniversal: Uint64
  public var paymentID: Uint64
  public var actualSourcePaymentFee: Fee
  public var actualDestinationPaymentFee: Fee
  public var ext: PaymentResponseExt

  public init(
      destination: AccountID,
      destinationBalanceID: BalanceID,
      asset: AssetCode,
      sourceSentUniversal: Uint64,
      paymentID: Uint64,
      actualSourcePaymentFee: Fee,
      actualDestinationPaymentFee: Fee,
      ext: PaymentResponseExt) {

    self.destination = destination
    self.destinationBalanceID = destinationBalanceID
    self.asset = asset
    self.sourceSentUniversal = sourceSentUniversal
    self.paymentID = paymentID
    self.actualSourcePaymentFee = actualSourcePaymentFee
    self.actualDestinationPaymentFee = actualDestinationPaymentFee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.destination.toXDR())
    xdr.append(self.destinationBalanceID.toXDR())
    xdr.append(self.asset.toXDR())
    xdr.append(self.sourceSentUniversal.toXDR())
    xdr.append(self.paymentID.toXDR())
    xdr.append(self.actualSourcePaymentFee.toXDR())
    xdr.append(self.actualDestinationPaymentFee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.destination = try AccountID(xdrData: &xdrData)
    self.destinationBalanceID = try BalanceID(xdrData: &xdrData)
    self.asset = try AssetCode(xdrData: &xdrData)
    self.sourceSentUniversal = try Uint64(xdrData: &xdrData)
    self.paymentID = try Uint64(xdrData: &xdrData)
    self.actualSourcePaymentFee = try Fee(xdrData: &xdrData)
    self.actualDestinationPaymentFee = try Fee(xdrData: &xdrData)
    self.ext = try PaymentResponseExt(xdrData: &xdrData)
  }

  public enum PaymentResponseExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
