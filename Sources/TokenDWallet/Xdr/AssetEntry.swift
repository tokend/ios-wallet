// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct AssetEntry
//  {
//      //: Code of the asset
//      AssetCode code;
//      //: Owner(creator) of the asset
//  	AccountID owner;
//  	//: Account responsible for preissuance of the asset
//  	AccountID preissuedAssetSigner;
//      //: Arbitrary stringified JSON object that can be used to attach data to asset
//  	longstring details;
//  	//: Maximal amount of tokens that can be issued
//  	uint64 maxIssuanceAmount;
//  	//: Amount of tokens available for issuance
//  	uint64 availableForIssueance;
//  	//: Amount of tokens issued already
//  	uint64 issued;
//  	//: Amount of tokens to be issued which is locked. `pendingIssuance+issued <= maxIssuanceAmount`
//  	uint64 pendingIssuance;
//  	//: Policies of the asset
//      uint32 policies;
//      //: Used to restrict usage. Used in account rules
//      uint64 type;
//      //: Number of decimal places. Must be <= 6
//      uint32 trailingDigitsCount;
//  
//      //: Reserved for future use
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct AssetEntry: XDRCodable {
  public var code: AssetCode
  public var owner: AccountID
  public var preissuedAssetSigner: AccountID
  public var details: Longstring
  public var maxIssuanceAmount: Uint64
  public var availableForIssueance: Uint64
  public var issued: Uint64
  public var pendingIssuance: Uint64
  public var policies: Uint32
  public var type: Uint64
  public var trailingDigitsCount: Uint32
  public var ext: EmptyExt

  public init(
      code: AssetCode,
      owner: AccountID,
      preissuedAssetSigner: AccountID,
      details: Longstring,
      maxIssuanceAmount: Uint64,
      availableForIssueance: Uint64,
      issued: Uint64,
      pendingIssuance: Uint64,
      policies: Uint32,
      type: Uint64,
      trailingDigitsCount: Uint32,
      ext: EmptyExt) {

    self.code = code
    self.owner = owner
    self.preissuedAssetSigner = preissuedAssetSigner
    self.details = details
    self.maxIssuanceAmount = maxIssuanceAmount
    self.availableForIssueance = availableForIssueance
    self.issued = issued
    self.pendingIssuance = pendingIssuance
    self.policies = policies
    self.type = type
    self.trailingDigitsCount = trailingDigitsCount
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.code.toXDR())
    xdr.append(self.owner.toXDR())
    xdr.append(self.preissuedAssetSigner.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.maxIssuanceAmount.toXDR())
    xdr.append(self.availableForIssueance.toXDR())
    xdr.append(self.issued.toXDR())
    xdr.append(self.pendingIssuance.toXDR())
    xdr.append(self.policies.toXDR())
    xdr.append(self.type.toXDR())
    xdr.append(self.trailingDigitsCount.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.code = try AssetCode(xdrData: &xdrData)
    self.owner = try AccountID(xdrData: &xdrData)
    self.preissuedAssetSigner = try AccountID(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.maxIssuanceAmount = try Uint64(xdrData: &xdrData)
    self.availableForIssueance = try Uint64(xdrData: &xdrData)
    self.issued = try Uint64(xdrData: &xdrData)
    self.pendingIssuance = try Uint64(xdrData: &xdrData)
    self.policies = try Uint32(xdrData: &xdrData)
    self.type = try Uint64(xdrData: &xdrData)
    self.trailingDigitsCount = try Uint32(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
