// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct ReviewableRequestEntry {
//  	uint64 requestID;
//  	Hash hash; // hash of the request body
//  	AccountID requestor;
//  	longstring rejectReason;
//  	AccountID reviewer;
//  	string64* reference; // reference for request which will act as an unique key for the request (will reject request with the same reference from same requestor)
//  	int64 createdAt; // when request was created
//  
//  	union switch (ReviewableRequestType type) {
//  		case CREATE_ASSET:
//  			AssetCreationRequest assetCreationRequest;
//  		case UPDATE_ASSET:
//  			AssetUpdateRequest assetUpdateRequest;
//  		case CREATE_PRE_ISSUANCE:
//  			PreIssuanceRequest preIssuanceRequest;
//  		case CREATE_ISSUANCE:
//  			IssuanceRequest issuanceRequest;
//  		case CREATE_WITHDRAW:
//  			WithdrawalRequest withdrawalRequest;
//  		case CREATE_SALE:
//  			SaleCreationRequest saleCreationRequest;
//          case UPDATE_LIMITS:
//              LimitsUpdateRequest limitsUpdateRequest;
//          case CREATE_AML_ALERT:
//              AMLAlertRequest amlAlertRequest;
//          case CHANGE_ROLE:
//              ChangeRoleRequest changeRoleRequest;
//          case UPDATE_SALE_DETAILS:
//              UpdateSaleDetailsRequest updateSaleDetailsRequest;
//          case CREATE_INVOICE:
//              InvoiceRequest invoiceRequest;
//          case MANAGE_CONTRACT:
//              ContractRequest contractRequest;
//          case CREATE_ATOMIC_SWAP_ASK:
//              CreateAtomicSwapAskRequest createAtomicSwapAskRequest;
//          case CREATE_ATOMIC_SWAP_BID:
//              CreateAtomicSwapBidRequest createAtomicSwapBidRequest;
//          case CREATE_POLL:
//              CreatePollRequest createPollRequest;
//          case KYC_RECOVERY:
//              KYCRecoveryRequest kycRecoveryRequest;
//  		case MANAGE_OFFER:
//  			ManageOfferRequest manageOfferRequest;
//  		case CREATE_PAYMENT:
//  			CreatePaymentRequest createPaymentRequest;
//          case PERFORM_REDEMPTION:
//              RedemptionRequest redemptionRequest;
//          case DATA_CREATION:
//              DataCreationRequest dataCreationRequest;
//          case DATA_UPDATE:
//              DataUpdateRequest dataUpdateRequest;
//          case DATA_REMOVE:
//              DataRemoveRequest dataRemoveRequest;
//          case CREATE_DEFERRED_PAYMENT:
//              CreateDeferredPaymentRequest createDeferredPaymentRequest;
//          case CLOSE_DEFERRED_PAYMENT:
//              CloseDeferredPaymentRequest closeDeferredPaymentRequest;
//          case DATA_OWNER_UPDATE:
//              DataOwnerUpdateRequest dataOwnerUpdateRequest;
//  
//  	} body;
//  
//  	TasksExt tasks;
//  
//  	// reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//  	}
//      ext;
//  };

//  ===========================================================================
public struct ReviewableRequestEntry: XDRCodable {
  public var requestID: Uint64
  public var hash: Hash
  public var requestor: AccountID
  public var rejectReason: Longstring
  public var reviewer: AccountID
  public var reference: String64?
  public var createdAt: Int64
  public var body: ReviewableRequestEntryBody
  public var tasks: TasksExt
  public var ext: ReviewableRequestEntryExt

  public init(
      requestID: Uint64,
      hash: Hash,
      requestor: AccountID,
      rejectReason: Longstring,
      reviewer: AccountID,
      reference: String64?,
      createdAt: Int64,
      body: ReviewableRequestEntryBody,
      tasks: TasksExt,
      ext: ReviewableRequestEntryExt) {

    self.requestID = requestID
    self.hash = hash
    self.requestor = requestor
    self.rejectReason = rejectReason
    self.reviewer = reviewer
    self.reference = reference
    self.createdAt = createdAt
    self.body = body
    self.tasks = tasks
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.requestID.toXDR())
    xdr.append(self.hash.toXDR())
    xdr.append(self.requestor.toXDR())
    xdr.append(self.rejectReason.toXDR())
    xdr.append(self.reviewer.toXDR())
    xdr.append(self.reference.toXDR())
    xdr.append(self.createdAt.toXDR())
    xdr.append(self.body.toXDR())
    xdr.append(self.tasks.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.requestID = try Uint64(xdrData: &xdrData)
    self.hash = try Hash(xdrData: &xdrData)
    self.requestor = try AccountID(xdrData: &xdrData)
    self.rejectReason = try Longstring(xdrData: &xdrData)
    self.reviewer = try AccountID(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.reference = try String64(xdrData: &xdrData)
    } else {
      self.reference = nil
    }
    self.createdAt = try Int64(xdrData: &xdrData)
    self.body = try ReviewableRequestEntryBody(xdrData: &xdrData)
    self.tasks = try TasksExt(xdrData: &xdrData)
    self.ext = try ReviewableRequestEntryExt(xdrData: &xdrData)
  }

  public enum ReviewableRequestEntryBody: XDRDiscriminatedUnion {
    case createAsset(AssetCreationRequest)
    case updateAsset(AssetUpdateRequest)
    case createPreIssuance(PreIssuanceRequest)
    case createIssuance(IssuanceRequest)
    case createWithdraw(WithdrawalRequest)
    case createSale(SaleCreationRequest)
    case updateLimits(LimitsUpdateRequest)
    case createAmlAlert(AMLAlertRequest)
    case changeRole(ChangeRoleRequest)
    case updateSaleDetails(UpdateSaleDetailsRequest)
    case createInvoice(InvoiceRequest)
    case manageContract(ContractRequest)
    case createAtomicSwapAsk(CreateAtomicSwapAskRequest)
    case createAtomicSwapBid(CreateAtomicSwapBidRequest)
    case createPoll(CreatePollRequest)
    case kycRecovery(KYCRecoveryRequest)
    case manageOffer(ManageOfferRequest)
    case createPayment(CreatePaymentRequest)
    case performRedemption(RedemptionRequest)
    case dataCreation(DataCreationRequest)
    case dataUpdate(DataUpdateRequest)
    case dataRemove(DataRemoveRequest)
    case createDeferredPayment(CreateDeferredPaymentRequest)
    case closeDeferredPayment(CloseDeferredPaymentRequest)
    case dataOwnerUpdate(DataOwnerUpdateRequest)

    public var discriminant: Int32 {
      switch self {
      case .createAsset: return ReviewableRequestType.createAsset.rawValue
      case .updateAsset: return ReviewableRequestType.updateAsset.rawValue
      case .createPreIssuance: return ReviewableRequestType.createPreIssuance.rawValue
      case .createIssuance: return ReviewableRequestType.createIssuance.rawValue
      case .createWithdraw: return ReviewableRequestType.createWithdraw.rawValue
      case .createSale: return ReviewableRequestType.createSale.rawValue
      case .updateLimits: return ReviewableRequestType.updateLimits.rawValue
      case .createAmlAlert: return ReviewableRequestType.createAmlAlert.rawValue
      case .changeRole: return ReviewableRequestType.changeRole.rawValue
      case .updateSaleDetails: return ReviewableRequestType.updateSaleDetails.rawValue
      case .createInvoice: return ReviewableRequestType.createInvoice.rawValue
      case .manageContract: return ReviewableRequestType.manageContract.rawValue
      case .createAtomicSwapAsk: return ReviewableRequestType.createAtomicSwapAsk.rawValue
      case .createAtomicSwapBid: return ReviewableRequestType.createAtomicSwapBid.rawValue
      case .createPoll: return ReviewableRequestType.createPoll.rawValue
      case .kycRecovery: return ReviewableRequestType.kycRecovery.rawValue
      case .manageOffer: return ReviewableRequestType.manageOffer.rawValue
      case .createPayment: return ReviewableRequestType.createPayment.rawValue
      case .performRedemption: return ReviewableRequestType.performRedemption.rawValue
      case .dataCreation: return ReviewableRequestType.dataCreation.rawValue
      case .dataUpdate: return ReviewableRequestType.dataUpdate.rawValue
      case .dataRemove: return ReviewableRequestType.dataRemove.rawValue
      case .createDeferredPayment: return ReviewableRequestType.createDeferredPayment.rawValue
      case .closeDeferredPayment: return ReviewableRequestType.closeDeferredPayment.rawValue
      case .dataOwnerUpdate: return ReviewableRequestType.dataOwnerUpdate.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .createAsset(let data): xdr.append(data.toXDR())
      case .updateAsset(let data): xdr.append(data.toXDR())
      case .createPreIssuance(let data): xdr.append(data.toXDR())
      case .createIssuance(let data): xdr.append(data.toXDR())
      case .createWithdraw(let data): xdr.append(data.toXDR())
      case .createSale(let data): xdr.append(data.toXDR())
      case .updateLimits(let data): xdr.append(data.toXDR())
      case .createAmlAlert(let data): xdr.append(data.toXDR())
      case .changeRole(let data): xdr.append(data.toXDR())
      case .updateSaleDetails(let data): xdr.append(data.toXDR())
      case .createInvoice(let data): xdr.append(data.toXDR())
      case .manageContract(let data): xdr.append(data.toXDR())
      case .createAtomicSwapAsk(let data): xdr.append(data.toXDR())
      case .createAtomicSwapBid(let data): xdr.append(data.toXDR())
      case .createPoll(let data): xdr.append(data.toXDR())
      case .kycRecovery(let data): xdr.append(data.toXDR())
      case .manageOffer(let data): xdr.append(data.toXDR())
      case .createPayment(let data): xdr.append(data.toXDR())
      case .performRedemption(let data): xdr.append(data.toXDR())
      case .dataCreation(let data): xdr.append(data.toXDR())
      case .dataUpdate(let data): xdr.append(data.toXDR())
      case .dataRemove(let data): xdr.append(data.toXDR())
      case .createDeferredPayment(let data): xdr.append(data.toXDR())
      case .closeDeferredPayment(let data): xdr.append(data.toXDR())
      case .dataOwnerUpdate(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case ReviewableRequestType.createAsset.rawValue:
        let data = try AssetCreationRequest(xdrData: &xdrData)
        self = .createAsset(data)
      case ReviewableRequestType.updateAsset.rawValue:
        let data = try AssetUpdateRequest(xdrData: &xdrData)
        self = .updateAsset(data)
      case ReviewableRequestType.createPreIssuance.rawValue:
        let data = try PreIssuanceRequest(xdrData: &xdrData)
        self = .createPreIssuance(data)
      case ReviewableRequestType.createIssuance.rawValue:
        let data = try IssuanceRequest(xdrData: &xdrData)
        self = .createIssuance(data)
      case ReviewableRequestType.createWithdraw.rawValue:
        let data = try WithdrawalRequest(xdrData: &xdrData)
        self = .createWithdraw(data)
      case ReviewableRequestType.createSale.rawValue:
        let data = try SaleCreationRequest(xdrData: &xdrData)
        self = .createSale(data)
      case ReviewableRequestType.updateLimits.rawValue:
        let data = try LimitsUpdateRequest(xdrData: &xdrData)
        self = .updateLimits(data)
      case ReviewableRequestType.createAmlAlert.rawValue:
        let data = try AMLAlertRequest(xdrData: &xdrData)
        self = .createAmlAlert(data)
      case ReviewableRequestType.changeRole.rawValue:
        let data = try ChangeRoleRequest(xdrData: &xdrData)
        self = .changeRole(data)
      case ReviewableRequestType.updateSaleDetails.rawValue:
        let data = try UpdateSaleDetailsRequest(xdrData: &xdrData)
        self = .updateSaleDetails(data)
      case ReviewableRequestType.createInvoice.rawValue:
        let data = try InvoiceRequest(xdrData: &xdrData)
        self = .createInvoice(data)
      case ReviewableRequestType.manageContract.rawValue:
        let data = try ContractRequest(xdrData: &xdrData)
        self = .manageContract(data)
      case ReviewableRequestType.createAtomicSwapAsk.rawValue:
        let data = try CreateAtomicSwapAskRequest(xdrData: &xdrData)
        self = .createAtomicSwapAsk(data)
      case ReviewableRequestType.createAtomicSwapBid.rawValue:
        let data = try CreateAtomicSwapBidRequest(xdrData: &xdrData)
        self = .createAtomicSwapBid(data)
      case ReviewableRequestType.createPoll.rawValue:
        let data = try CreatePollRequest(xdrData: &xdrData)
        self = .createPoll(data)
      case ReviewableRequestType.kycRecovery.rawValue:
        let data = try KYCRecoveryRequest(xdrData: &xdrData)
        self = .kycRecovery(data)
      case ReviewableRequestType.manageOffer.rawValue:
        let data = try ManageOfferRequest(xdrData: &xdrData)
        self = .manageOffer(data)
      case ReviewableRequestType.createPayment.rawValue:
        let data = try CreatePaymentRequest(xdrData: &xdrData)
        self = .createPayment(data)
      case ReviewableRequestType.performRedemption.rawValue:
        let data = try RedemptionRequest(xdrData: &xdrData)
        self = .performRedemption(data)
      case ReviewableRequestType.dataCreation.rawValue:
        let data = try DataCreationRequest(xdrData: &xdrData)
        self = .dataCreation(data)
      case ReviewableRequestType.dataUpdate.rawValue:
        let data = try DataUpdateRequest(xdrData: &xdrData)
        self = .dataUpdate(data)
      case ReviewableRequestType.dataRemove.rawValue:
        let data = try DataRemoveRequest(xdrData: &xdrData)
        self = .dataRemove(data)
      case ReviewableRequestType.createDeferredPayment.rawValue:
        let data = try CreateDeferredPaymentRequest(xdrData: &xdrData)
        self = .createDeferredPayment(data)
      case ReviewableRequestType.closeDeferredPayment.rawValue:
        let data = try CloseDeferredPaymentRequest(xdrData: &xdrData)
        self = .closeDeferredPayment(data)
      case ReviewableRequestType.dataOwnerUpdate.rawValue:
        let data = try DataOwnerUpdateRequest(xdrData: &xdrData)
        self = .dataOwnerUpdate(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
  public enum ReviewableRequestEntryExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
