// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Contains details of successful operation application
//  struct ManageOfferSuccessResult
//  {
//  
//      //: Offers that matched a created offer
//      ClaimOfferAtom offersClaimed<>;
//      //: Base asset of an offer
//      AssetCode baseAsset;
//      //: Quote asset of an offer
//      AssetCode quoteAsset;
//      
//      //: Effect of operation
//      union switch (ManageOfferEffect effect)
//      {
//      case CREATED:
//      case UPDATED:
//          //: Updated offer entry
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageOfferSuccessResult: XDRCodable {
  public var offersClaimed: [ClaimOfferAtom]
  public var baseAsset: AssetCode
  public var quoteAsset: AssetCode
  public var offer: ManageOfferSuccessResultOffer
  public var ext: ManageOfferSuccessResultExt

  public init(
      offersClaimed: [ClaimOfferAtom],
      baseAsset: AssetCode,
      quoteAsset: AssetCode,
      offer: ManageOfferSuccessResultOffer,
      ext: ManageOfferSuccessResultExt) {

    self.offersClaimed = offersClaimed
    self.baseAsset = baseAsset
    self.quoteAsset = quoteAsset
    self.offer = offer
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.offersClaimed.toXDR())
    xdr.append(self.baseAsset.toXDR())
    xdr.append(self.quoteAsset.toXDR())
    xdr.append(self.offer.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let lengthoffersClaimed = try Int32(xdrData: &xdrData)
    self.offersClaimed = [ClaimOfferAtom]()
    for _ in 1...lengthoffersClaimed {
      self.offersClaimed.append(try ClaimOfferAtom(xdrData: &xdrData))
    }
    self.baseAsset = try AssetCode(xdrData: &xdrData)
    self.quoteAsset = try AssetCode(xdrData: &xdrData)
    self.offer = try ManageOfferSuccessResultOffer(xdrData: &xdrData)
    self.ext = try ManageOfferSuccessResultExt(xdrData: &xdrData)
  }

  public enum ManageOfferSuccessResultOffer: XDRDiscriminatedUnion {
    case created(OfferEntry)
    case updated(OfferEntry)

    public var discriminant: Int32 {
      switch self {
      case .created: return ManageOfferEffect.created.rawValue
      case .updated: return ManageOfferEffect.updated.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .created(let data): xdr.append(data.toXDR())
      case .updated(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case ManageOfferEffect.created.rawValue:
        let data = try OfferEntry(xdrData: &xdrData)
        self = .created(data)
      case ManageOfferEffect.updated.rawValue:
        let data = try OfferEntry(xdrData: &xdrData)
        self = .updated(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
  public enum ManageOfferSuccessResultExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
