// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Entry for additional information regarding sub sale closing
//  struct CheckSubSaleClosedResult {
//      //: Balance in base asset of the closed sale
//      BalanceID saleBaseBalance;
//      //: Balance in one of the quote assets of the closed sale
//      BalanceID saleQuoteBalance;
//      //: Result of an individual offer made during the sale and completed on its close
//      ManageOfferSuccessResult saleDetails;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//        void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CheckSubSaleClosedResult: XDRCodable {
  public var saleBaseBalance: BalanceID
  public var saleQuoteBalance: BalanceID
  public var saleDetails: ManageOfferSuccessResult
  public var ext: CheckSubSaleClosedResultExt

  public init(
      saleBaseBalance: BalanceID,
      saleQuoteBalance: BalanceID,
      saleDetails: ManageOfferSuccessResult,
      ext: CheckSubSaleClosedResultExt) {

    self.saleBaseBalance = saleBaseBalance
    self.saleQuoteBalance = saleQuoteBalance
    self.saleDetails = saleDetails
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.saleBaseBalance.toXDR())
    xdr.append(self.saleQuoteBalance.toXDR())
    xdr.append(self.saleDetails.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.saleBaseBalance = try BalanceID(xdrData: &xdrData)
    self.saleQuoteBalance = try BalanceID(xdrData: &xdrData)
    self.saleDetails = try ManageOfferSuccessResult(xdrData: &xdrData)
    self.ext = try CheckSubSaleClosedResultExt(xdrData: &xdrData)
  }

  public enum CheckSubSaleClosedResultExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
