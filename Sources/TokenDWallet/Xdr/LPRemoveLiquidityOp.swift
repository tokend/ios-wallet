// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LPRemoveLiquidityOp
//      {
//          //: Balance of an LP token
//          BalanceID lpTokenBalance;
//          //: Amount of the LP tokens to be exchanged for assets pair
//          uint64 lpTokensAmount;
//  
//          //: Minimal amount of first asset to be received
//          uint64 firstAssetMinAmount;
//          //: Minimal amount of second asset to be received
//          uint64 secondAssetMinAmount;
//  
//          //: Reserved for future use
//          EmptyExt ext;
//      };

//  ===========================================================================
public struct LPRemoveLiquidityOp: XDRCodable {
  public var lpTokenBalance: BalanceID
  public var lpTokensAmount: Uint64
  public var firstAssetMinAmount: Uint64
  public var secondAssetMinAmount: Uint64
  public var ext: EmptyExt

  public init(
      lpTokenBalance: BalanceID,
      lpTokensAmount: Uint64,
      firstAssetMinAmount: Uint64,
      secondAssetMinAmount: Uint64,
      ext: EmptyExt) {

    self.lpTokenBalance = lpTokenBalance
    self.lpTokensAmount = lpTokensAmount
    self.firstAssetMinAmount = firstAssetMinAmount
    self.secondAssetMinAmount = secondAssetMinAmount
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.lpTokenBalance.toXDR())
    xdr.append(self.lpTokensAmount.toXDR())
    xdr.append(self.firstAssetMinAmount.toXDR())
    xdr.append(self.secondAssetMinAmount.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.lpTokenBalance = try BalanceID(xdrData: &xdrData)
    self.lpTokensAmount = try Uint64(xdrData: &xdrData)
    self.firstAssetMinAmount = try Uint64(xdrData: &xdrData)
    self.secondAssetMinAmount = try Uint64(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
