// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Is used to pass required values to perform pre issuance
//  struct PreIssuanceRequest
//  {
//      //: Code of an asset whose `available_for_issuance_amount` will increase
//      AssetCode asset;
//      //: Amount that will be added to current available for issuance amount
//      uint64 amount;
//      //: Pre issuer signer's signature of the `<reference>:<amount>:<asset>` hash
//      DecoratedSignature signature;
//      //: Unique string for such type of a reviewable request
//      string64 reference;
//      //: Arbitrary stringified json object provided by a requester
//      longstring creatorDetails; // details set by requester
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct PreIssuanceRequest: XDRCodable {
  public var asset: AssetCode
  public var amount: Uint64
  public var signature: DecoratedSignature
  public var reference: String64
  public var creatorDetails: Longstring
  public var ext: PreIssuanceRequestExt

  public init(
      asset: AssetCode,
      amount: Uint64,
      signature: DecoratedSignature,
      reference: String64,
      creatorDetails: Longstring,
      ext: PreIssuanceRequestExt) {

    self.asset = asset
    self.amount = amount
    self.signature = signature
    self.reference = reference
    self.creatorDetails = creatorDetails
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.asset.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.signature.toXDR())
    xdr.append(self.reference.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.asset = try AssetCode(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.signature = try DecoratedSignature(xdrData: &xdrData)
    self.reference = try String64(xdrData: &xdrData)
    self.creatorDetails = try Longstring(xdrData: &xdrData)
    self.ext = try PreIssuanceRequestExt(xdrData: &xdrData)
  }

  public enum PreIssuanceRequestExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
