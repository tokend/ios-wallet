// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct PaymentFeeData {
//      //: Fee to pay by source balance
//      Fee sourceFee;
//      //: Fee kept from destination account/balance
//      Fee destinationFee;
//      //: Indicates whether or not the source of payment pays the destination fee
//      bool sourcePaysForDest;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct PaymentFeeData: XDRCodable {
  public var sourceFee: Fee
  public var destinationFee: Fee
  public var sourcePaysForDest: Bool
  public var ext: PaymentFeeDataExt

  public init(
      sourceFee: Fee,
      destinationFee: Fee,
      sourcePaysForDest: Bool,
      ext: PaymentFeeDataExt) {

    self.sourceFee = sourceFee
    self.destinationFee = destinationFee
    self.sourcePaysForDest = sourcePaysForDest
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.sourceFee.toXDR())
    xdr.append(self.destinationFee.toXDR())
    xdr.append(self.sourcePaysForDest.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.sourceFee = try Fee(xdrData: &xdrData)
    self.destinationFee = try Fee(xdrData: &xdrData)
    self.sourcePaysForDest = try Bool(xdrData: &xdrData)
    self.ext = try PaymentFeeDataExt(xdrData: &xdrData)
  }

  public enum PaymentFeeDataExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
