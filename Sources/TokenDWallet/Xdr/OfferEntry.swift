// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct OfferEntry
//  {	
//      uint64 offerID;
//  	uint64 orderBookID;
//  	AccountID ownerID;
//  	bool isBuy;
//      AssetCode base; // A
//      AssetCode quote;  // B
//  	BalanceID baseBalance; 
//  	BalanceID quoteBalance;
//      int64 baseAmount;
//  	int64 quoteAmount;
//  	uint64 createdAt;
//  	int64 fee;
//  
//      int64 percentFee;
//  
//  	// price of A in terms of B
//      int64 price;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct OfferEntry: XDRCodable {
  public var offerID: Uint64
  public var orderBookID: Uint64
  public var ownerID: AccountID
  public var isBuy: Bool
  public var base: AssetCode
  public var quote: AssetCode
  public var baseBalance: BalanceID
  public var quoteBalance: BalanceID
  public var baseAmount: Int64
  public var quoteAmount: Int64
  public var createdAt: Uint64
  public var fee: Int64
  public var percentFee: Int64
  public var price: Int64
  public var ext: OfferEntryExt

  public init(
      offerID: Uint64,
      orderBookID: Uint64,
      ownerID: AccountID,
      isBuy: Bool,
      base: AssetCode,
      quote: AssetCode,
      baseBalance: BalanceID,
      quoteBalance: BalanceID,
      baseAmount: Int64,
      quoteAmount: Int64,
      createdAt: Uint64,
      fee: Int64,
      percentFee: Int64,
      price: Int64,
      ext: OfferEntryExt) {

    self.offerID = offerID
    self.orderBookID = orderBookID
    self.ownerID = ownerID
    self.isBuy = isBuy
    self.base = base
    self.quote = quote
    self.baseBalance = baseBalance
    self.quoteBalance = quoteBalance
    self.baseAmount = baseAmount
    self.quoteAmount = quoteAmount
    self.createdAt = createdAt
    self.fee = fee
    self.percentFee = percentFee
    self.price = price
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.offerID.toXDR())
    xdr.append(self.orderBookID.toXDR())
    xdr.append(self.ownerID.toXDR())
    xdr.append(self.isBuy.toXDR())
    xdr.append(self.base.toXDR())
    xdr.append(self.quote.toXDR())
    xdr.append(self.baseBalance.toXDR())
    xdr.append(self.quoteBalance.toXDR())
    xdr.append(self.baseAmount.toXDR())
    xdr.append(self.quoteAmount.toXDR())
    xdr.append(self.createdAt.toXDR())
    xdr.append(self.fee.toXDR())
    xdr.append(self.percentFee.toXDR())
    xdr.append(self.price.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.offerID = try Uint64(xdrData: &xdrData)
    self.orderBookID = try Uint64(xdrData: &xdrData)
    self.ownerID = try AccountID(xdrData: &xdrData)
    self.isBuy = try Bool(xdrData: &xdrData)
    self.base = try AssetCode(xdrData: &xdrData)
    self.quote = try AssetCode(xdrData: &xdrData)
    self.baseBalance = try BalanceID(xdrData: &xdrData)
    self.quoteBalance = try BalanceID(xdrData: &xdrData)
    self.baseAmount = try Int64(xdrData: &xdrData)
    self.quoteAmount = try Int64(xdrData: &xdrData)
    self.createdAt = try Uint64(xdrData: &xdrData)
    self.fee = try Int64(xdrData: &xdrData)
    self.percentFee = try Int64(xdrData: &xdrData)
    self.price = try Int64(xdrData: &xdrData)
    self.ext = try OfferEntryExt(xdrData: &xdrData)
  }

  public enum OfferEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
