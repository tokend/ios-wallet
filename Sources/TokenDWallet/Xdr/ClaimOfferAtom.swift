// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Used when offers are taken during the operation
//  struct ClaimOfferAtom
//  {
//      // emitted to identify the offer
//      //: ID of an account that created the matched offer
//      AccountID bAccountID;
//      //: ID of the matched offer
//      uint64 offerID;
//      //: Amount in base asset taken during the match
//      int64 baseAmount;
//      //: Amount in quote asset taked during the match
//      int64 quoteAmount;
//      //: Fee paid by an offer owner
//      int64 bFeePaid;
//      //: Fee paid by the source of an operation
//      int64 aFeePaid;
//      //: Balance in base asset of an offer owner
//      BalanceID baseBalance;
//      //: Balance in quote asset of an offer owner
//      BalanceID quoteBalance;
//      //: Match price
//      int64 currentPrice;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ClaimOfferAtom: XDRCodable {
  public var bAccountID: AccountID
  public var offerID: Uint64
  public var baseAmount: Int64
  public var quoteAmount: Int64
  public var bFeePaid: Int64
  public var aFeePaid: Int64
  public var baseBalance: BalanceID
  public var quoteBalance: BalanceID
  public var currentPrice: Int64
  public var ext: ClaimOfferAtomExt

  public init(
      bAccountID: AccountID,
      offerID: Uint64,
      baseAmount: Int64,
      quoteAmount: Int64,
      bFeePaid: Int64,
      aFeePaid: Int64,
      baseBalance: BalanceID,
      quoteBalance: BalanceID,
      currentPrice: Int64,
      ext: ClaimOfferAtomExt) {

    self.bAccountID = bAccountID
    self.offerID = offerID
    self.baseAmount = baseAmount
    self.quoteAmount = quoteAmount
    self.bFeePaid = bFeePaid
    self.aFeePaid = aFeePaid
    self.baseBalance = baseBalance
    self.quoteBalance = quoteBalance
    self.currentPrice = currentPrice
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.bAccountID.toXDR())
    xdr.append(self.offerID.toXDR())
    xdr.append(self.baseAmount.toXDR())
    xdr.append(self.quoteAmount.toXDR())
    xdr.append(self.bFeePaid.toXDR())
    xdr.append(self.aFeePaid.toXDR())
    xdr.append(self.baseBalance.toXDR())
    xdr.append(self.quoteBalance.toXDR())
    xdr.append(self.currentPrice.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.bAccountID = try AccountID(xdrData: &xdrData)
    self.offerID = try Uint64(xdrData: &xdrData)
    self.baseAmount = try Int64(xdrData: &xdrData)
    self.quoteAmount = try Int64(xdrData: &xdrData)
    self.bFeePaid = try Int64(xdrData: &xdrData)
    self.aFeePaid = try Int64(xdrData: &xdrData)
    self.baseBalance = try BalanceID(xdrData: &xdrData)
    self.quoteBalance = try BalanceID(xdrData: &xdrData)
    self.currentPrice = try Int64(xdrData: &xdrData)
    self.ext = try ClaimOfferAtomExt(xdrData: &xdrData)
  }

  public enum ClaimOfferAtomExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
