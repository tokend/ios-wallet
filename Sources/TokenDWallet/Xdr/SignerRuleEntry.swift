// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct SignerRuleEntry
//  {
//      uint64 id;
//  
//      SignerRuleResource resource;
//      SignerRuleAction action;
//  
//      bool forbids;
//      bool isDefault; // default rules will be in each role
//  
//      longstring details;
//  
//      AccountID ownerID;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct SignerRuleEntry: XDRCodable {
  public var id: Uint64
  public var resource: SignerRuleResource
  public var action: SignerRuleAction
  public var forbids: Bool
  public var isDefault: Bool
  public var details: Longstring
  public var ownerID: AccountID
  public var ext: SignerRuleEntryExt

  public init(
      id: Uint64,
      resource: SignerRuleResource,
      action: SignerRuleAction,
      forbids: Bool,
      isDefault: Bool,
      details: Longstring,
      ownerID: AccountID,
      ext: SignerRuleEntryExt) {

    self.id = id
    self.resource = resource
    self.action = action
    self.forbids = forbids
    self.isDefault = isDefault
    self.details = details
    self.ownerID = ownerID
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.id.toXDR())
    xdr.append(self.resource.toXDR())
    xdr.append(self.action.toXDR())
    xdr.append(self.forbids.toXDR())
    xdr.append(self.isDefault.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.ownerID.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.id = try Uint64(xdrData: &xdrData)
    self.resource = try SignerRuleResource(xdrData: &xdrData)
    self.action = try SignerRuleAction(xdrData: &xdrData)
    self.forbids = try Bool(xdrData: &xdrData)
    self.isDefault = try Bool(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.ownerID = try AccountID(xdrData: &xdrData)
    self.ext = try SignerRuleEntryExt(xdrData: &xdrData)
  }

  public enum SignerRuleEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
