// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LPAddLiquidityOp
//      {
//          //: Balance for first asset of the pair
//          BalanceID firstAssetBalanceID;
//          //: Balance for second asset of the pair
//          BalanceID secondAssetBalanceID;
//  
//          //: Desired amount of first asset to be provided
//          uint64 firstAssetDesiredAmount;
//          //: Desired amount of second asset to be provided
//          uint64 secondAssetDesiredAmount;
//  
//          //: Minimal amount of first asset to be provided
//          uint64 firstAssetMinAmount;
//          //: Minimal amount of second asset to be provided
//          uint64 secondAssetMinAmount;
//  
//          //: Reserved for future use
//          EmptyExt ext;
//      };

//  ===========================================================================
public struct LPAddLiquidityOp: XDRCodable {
  public var firstAssetBalanceID: BalanceID
  public var secondAssetBalanceID: BalanceID
  public var firstAssetDesiredAmount: Uint64
  public var secondAssetDesiredAmount: Uint64
  public var firstAssetMinAmount: Uint64
  public var secondAssetMinAmount: Uint64
  public var ext: EmptyExt

  public init(
      firstAssetBalanceID: BalanceID,
      secondAssetBalanceID: BalanceID,
      firstAssetDesiredAmount: Uint64,
      secondAssetDesiredAmount: Uint64,
      firstAssetMinAmount: Uint64,
      secondAssetMinAmount: Uint64,
      ext: EmptyExt) {

    self.firstAssetBalanceID = firstAssetBalanceID
    self.secondAssetBalanceID = secondAssetBalanceID
    self.firstAssetDesiredAmount = firstAssetDesiredAmount
    self.secondAssetDesiredAmount = secondAssetDesiredAmount
    self.firstAssetMinAmount = firstAssetMinAmount
    self.secondAssetMinAmount = secondAssetMinAmount
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.firstAssetBalanceID.toXDR())
    xdr.append(self.secondAssetBalanceID.toXDR())
    xdr.append(self.firstAssetDesiredAmount.toXDR())
    xdr.append(self.secondAssetDesiredAmount.toXDR())
    xdr.append(self.firstAssetMinAmount.toXDR())
    xdr.append(self.secondAssetMinAmount.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.firstAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.secondAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.firstAssetDesiredAmount = try Uint64(xdrData: &xdrData)
    self.secondAssetDesiredAmount = try Uint64(xdrData: &xdrData)
    self.firstAssetMinAmount = try Uint64(xdrData: &xdrData)
    self.secondAssetMinAmount = try Uint64(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
