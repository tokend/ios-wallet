// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //:Result of ManageSale operation successful application 
//  struct ManageSaleResultSuccess
//  {
//      //: Indicates  whether or not the ManageSale request was auto approved and fulfilled
//      bool fulfilled; // can be used for any reviewable request type created with manage sale operation   
//  
//      //: response is used for additional information regarding the action performed on sale during operation application
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          uint64 requestID;
//      case CANCEL:
//          void;
//      } response;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct ManageSaleResultSuccess: XDRCodable {
  public var fulfilled: Bool
  public var response: ManageSaleResultSuccessResponse
  public var ext: ManageSaleResultSuccessExt

  public init(
      fulfilled: Bool,
      response: ManageSaleResultSuccessResponse,
      ext: ManageSaleResultSuccessExt) {

    self.fulfilled = fulfilled
    self.response = response
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.fulfilled.toXDR())
    xdr.append(self.response.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.fulfilled = try Bool(xdrData: &xdrData)
    self.response = try ManageSaleResultSuccessResponse(xdrData: &xdrData)
    self.ext = try ManageSaleResultSuccessExt(xdrData: &xdrData)
  }

  public enum ManageSaleResultSuccessResponse: XDRDiscriminatedUnion {
    case createUpdateDetailsRequest(Uint64)
    case cancel

    public var discriminant: Int32 {
      switch self {
      case .createUpdateDetailsRequest: return ManageSaleAction.createUpdateDetailsRequest.rawValue
      case .cancel: return ManageSaleAction.cancel.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .createUpdateDetailsRequest(let data): xdr.append(data.toXDR())
      case .cancel: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case ManageSaleAction.createUpdateDetailsRequest.rawValue:
        let data = try Uint64(xdrData: &xdrData)
        self = .createUpdateDetailsRequest(data)
      case ManageSaleAction.cancel.rawValue: self = .cancel
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
  public enum ManageSaleResultSuccessExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
