// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  union AuthenticatedMessage switch (LedgerVersion v)
//  {
//  case EMPTY_VERSION:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };

//  ===========================================================================
public enum AuthenticatedMessage: XDRDiscriminatedUnion {
  case emptyVersion(AuthenticatedMessageV0)

  public var discriminant: Int32 {
    switch self {
    case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .emptyVersion(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case LedgerVersion.emptyVersion.rawValue:
      let data = try AuthenticatedMessageV0(xdrData: &xdrData)
      self = .emptyVersion(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
  public struct AuthenticatedMessageV0: XDRCodable {
    public var sequence: Uint64
    public var message: StellarMessage
    public var mac: HmacSha256Mac

    public init(
        sequence: Uint64,
        message: StellarMessage,
        mac: HmacSha256Mac) {

      self.sequence = sequence
      self.message = message
      self.mac = mac
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.sequence.toXDR())
      xdr.append(self.message.toXDR())
      xdr.append(self.mac.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.sequence = try Uint64(xdrData: &xdrData)
      self.message = try StellarMessage(xdrData: &xdrData)
      self.mac = try HmacSha256Mac(xdrData: &xdrData)
    }

  }
}
