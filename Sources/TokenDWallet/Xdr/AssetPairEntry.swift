// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: `AssetPairEntry` is used in system to group different assets into pairs and set particular policies and properties for them
//  struct AssetPairEntry
//  {
//      //: Code of base asset of the asset pair
//      AssetCode base;
//      //: Code of quote asset of the asset pair
//      AssetCode quote;
//  
//      //: defines an asset pair price as quote asset divided by base asset (i.e., amount of quote asset per 1 base asset)
//      int64 currentPrice;
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPrice;
//  
//      //: Price of the asset pair assigned on creation. Can only be updated by application
//      //: the `ManageAssetPair` operation with action `UPDATE_PRICE`
//      int64 physicalPriceCorrection;
//  
//      //: Max price step in percent. User is allowed to set offer only if both of
//      //: `price < (1 - maxPriceStep) * currentPrice` and `price > (1 + maxPriceStep) * currentPrice` are `true`
//      int64 maxPriceStep;
//  
//      //: Bitmask of asset policies set by creator or corrected by `ManageAssetPair` operations
//      int32 policies;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct AssetPairEntry: XDRCodable {
  public var base: AssetCode
  public var quote: AssetCode
  public var currentPrice: Int64
  public var physicalPrice: Int64
  public var physicalPriceCorrection: Int64
  public var maxPriceStep: Int64
  public var policies: Int32
  public var ext: AssetPairEntryExt

  public init(
      base: AssetCode,
      quote: AssetCode,
      currentPrice: Int64,
      physicalPrice: Int64,
      physicalPriceCorrection: Int64,
      maxPriceStep: Int64,
      policies: Int32,
      ext: AssetPairEntryExt) {

    self.base = base
    self.quote = quote
    self.currentPrice = currentPrice
    self.physicalPrice = physicalPrice
    self.physicalPriceCorrection = physicalPriceCorrection
    self.maxPriceStep = maxPriceStep
    self.policies = policies
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.base.toXDR())
    xdr.append(self.quote.toXDR())
    xdr.append(self.currentPrice.toXDR())
    xdr.append(self.physicalPrice.toXDR())
    xdr.append(self.physicalPriceCorrection.toXDR())
    xdr.append(self.maxPriceStep.toXDR())
    xdr.append(self.policies.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.base = try AssetCode(xdrData: &xdrData)
    self.quote = try AssetCode(xdrData: &xdrData)
    self.currentPrice = try Int64(xdrData: &xdrData)
    self.physicalPrice = try Int64(xdrData: &xdrData)
    self.physicalPriceCorrection = try Int64(xdrData: &xdrData)
    self.maxPriceStep = try Int64(xdrData: &xdrData)
    self.policies = try Int32(xdrData: &xdrData)
    self.ext = try AssetPairEntryExt(xdrData: &xdrData)
  }

  public enum AssetPairEntryExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
