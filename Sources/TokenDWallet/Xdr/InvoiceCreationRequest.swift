// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct InvoiceCreationRequest
//  {
//      AssetCode asset;
//      AccountID sender;
//      uint64 amount; // not allowed to set 0
//  
//      uint64 *contractID;
//      longstring details;
//  
//      uint32* allTasks;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct InvoiceCreationRequest: XDRCodable {
  public var asset: AssetCode
  public var sender: AccountID
  public var amount: Uint64
  public var contractID: Uint64?
  public var details: Longstring
  public var allTasks: Uint32?
  public var ext: InvoiceCreationRequestExt

  public init(
      asset: AssetCode,
      sender: AccountID,
      amount: Uint64,
      contractID: Uint64?,
      details: Longstring,
      allTasks: Uint32?,
      ext: InvoiceCreationRequestExt) {

    self.asset = asset
    self.sender = sender
    self.amount = amount
    self.contractID = contractID
    self.details = details
    self.allTasks = allTasks
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.asset.toXDR())
    xdr.append(self.sender.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.contractID.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.allTasks.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.asset = try AssetCode(xdrData: &xdrData)
    self.sender = try AccountID(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.contractID = try Uint64(xdrData: &xdrData)
    } else {
      self.contractID = nil
    }
    self.details = try Longstring(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.allTasks = try Uint32(xdrData: &xdrData)
    } else {
      self.allTasks = nil
    }
    self.ext = try InvoiceCreationRequestExt(xdrData: &xdrData)
  }

  public enum InvoiceCreationRequestExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
