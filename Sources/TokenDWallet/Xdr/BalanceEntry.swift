// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct BalanceEntry
//  {
//      BalanceID balanceID;
//  	// sequential ID - unique identifier of the balance, used by ingesting applications to
//  	// identify account, while keeping size of index small 
//      uint64 sequentialID;
//      AssetCode asset;
//      AccountID accountID;
//      uint64 amount;
//      uint64 locked;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct BalanceEntry: XDRCodable {
  public var balanceID: BalanceID
  public var sequentialID: Uint64
  public var asset: AssetCode
  public var accountID: AccountID
  public var amount: Uint64
  public var locked: Uint64
  public var ext: BalanceEntryExt

  public init(
      balanceID: BalanceID,
      sequentialID: Uint64,
      asset: AssetCode,
      accountID: AccountID,
      amount: Uint64,
      locked: Uint64,
      ext: BalanceEntryExt) {

    self.balanceID = balanceID
    self.sequentialID = sequentialID
    self.asset = asset
    self.accountID = accountID
    self.amount = amount
    self.locked = locked
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.balanceID.toXDR())
    xdr.append(self.sequentialID.toXDR())
    xdr.append(self.asset.toXDR())
    xdr.append(self.accountID.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.locked.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.balanceID = try BalanceID(xdrData: &xdrData)
    self.sequentialID = try Uint64(xdrData: &xdrData)
    self.asset = try AssetCode(xdrData: &xdrData)
    self.accountID = try AccountID(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.locked = try Uint64(xdrData: &xdrData)
    self.ext = try BalanceEntryExt(xdrData: &xdrData)
  }

  public enum BalanceEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
