// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Describes properties of some reviewable request types that
//  //: can be used to restrict the usage of reviewable requests
//  union ReviewableRequestResource switch (ReviewableRequestType requestType)
//  {
//  case CREATE_SALE:
//      //: is used to restrict the usage of a reviewable request with create_sale type
//      struct
//      {
//          //: type of sale
//          uint64 type;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } createSale;
//  case CREATE_ISSUANCE:
//      //: is used to restrict the usage of a reviewable request with create_issuance type
//      struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } createIssuance;
//  case CREATE_WITHDRAW:
//      //: is used to restrict the usage of a reviewable request with create_withdraw type
//      struct
//      {
//          //: code of asset
//          AssetCode assetCode;
//          //: type of asset
//          uint64 assetType;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } createWithdraw;
//  case CREATE_ATOMIC_SWAP_ASK:
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ATOMIC_SWAP_RETURNING:
//          //: is used to restrict the usage of a reviewable request with create_atomic_swap_ask type
//          struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//  
//              //: reserved for future extension
//              EmptyExt ext;
//          } createAtomicSwapAsk;
//      } createAtomicSwapAskExt;
//  case CREATE_ATOMIC_SWAP_BID:
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      case ATOMIC_SWAP_RETURNING:
//          //: is used to restrict the usage of a reviewable request with create_atomic_swap_bid type
//          struct
//          {
//              //: code of asset
//              AssetCode assetCode;
//              //: type of asset
//              uint64 assetType;
//  
//              //: reserved for future extension
//              EmptyExt ext;
//          } createAtomicSwapBid;
//      } createAtomicSwapBidExt;
//  case CREATE_POLL:
//      //: is used to restrict the creating of a `CREATE_POLL` reviewable request type
//      struct
//      {
//          //: permission type of poll
//          uint32 permissionType;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } createPoll;
//  case MANAGE_OFFER:
//      struct
//      {
//          //: type of base asset
//          uint64 baseAssetType;
//          //: type of quote asset
//          uint64 quoteAssetType;
//  
//          //: code of base asset
//          AssetCode baseAssetCode;
//          //: code of quote asset
//          AssetCode quoteAssetCode;
//  
//          bool isBuy;
//          //: 0 means creation,
//          //: 1 means removing,
//          //: 2 means participate in sale,
//          //: 3 means remove participation in sale,
//          //: UINT32_MAX means any action.
//          uint32 manageAction;
//  
//          //: ID of the order book.
//          uint64 orderBookID;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } manageOffer;
//  case CREATE_PAYMENT:
//      struct
//      {
//          //: Code of asset in which payment is being made
//          AssetCode assetCode;
//          //: Type of asset in which payment is being made
//          uint64 assetType;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } createPayment;
//  case PERFORM_REDEMPTION:
//      struct
//      {
//          //: Code of asset in which redemption is being made
//          AssetCode assetCode;
//          //: Type of asset in which redemption is being made
//          uint64 assetType;
//  
//          //: reserved for future extension
//          EmptyExt ext;
//      } performRedemption;
//  case DATA_CREATION:
//      struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      } dataCreation;
//  case DATA_UPDATE:
//      struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      } dataUpdate;
//  case DATA_OWNER_UPDATE:
//      struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      } dataOwnerUpdate;
//  case DATA_REMOVE:
//      struct
//      {
//          //: Numeric type of the data
//          uint64 type;
//          //: Reserved for future extension
//          EmptyExt ext;
//      } dataRemove;
//  case CREATE_DEFERRED_PAYMENT:
//      struct
//      {
//          AssetCode assetCode;
//  
//          uint64 assetType;
//          EmptyExt ext;
//      } createDeferredPayment;
//  case CLOSE_DEFERRED_PAYMENT:
//      struct
//      {
//          AssetCode assetCode;
//  
//          uint64 assetType;
//          EmptyExt ext;
//      } closeDeferredPayment;
//  default:
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
public enum ReviewableRequestResource: XDRDiscriminatedUnion {
  case createSale(ReviewableRequestResourceCreateSale)
  case createIssuance(ReviewableRequestResourceCreateIssuance)
  case createWithdraw(ReviewableRequestResourceCreateWithdraw)
  case createAtomicSwapAsk(ReviewableRequestResourceCreateAtomicSwapAskExt)
  case createAtomicSwapBid(ReviewableRequestResourceCreateAtomicSwapBidExt)
  case createPoll(ReviewableRequestResourceCreatePoll)
  case manageOffer(ReviewableRequestResourceManageOffer)
  case createPayment(ReviewableRequestResourceCreatePayment)
  case performRedemption(ReviewableRequestResourcePerformRedemption)
  case dataCreation(ReviewableRequestResourceDataCreation)
  case dataUpdate(ReviewableRequestResourceDataUpdate)
  case dataOwnerUpdate(ReviewableRequestResourceDataOwnerUpdate)
  case dataRemove(ReviewableRequestResourceDataRemove)
  case createDeferredPayment(ReviewableRequestResourceCreateDeferredPayment)
  case closeDeferredPayment(ReviewableRequestResourceCloseDeferredPayment)

  public var discriminant: Int32 {
    switch self {
    case .createSale: return ReviewableRequestType.createSale.rawValue
    case .createIssuance: return ReviewableRequestType.createIssuance.rawValue
    case .createWithdraw: return ReviewableRequestType.createWithdraw.rawValue
    case .createAtomicSwapAsk: return ReviewableRequestType.createAtomicSwapAsk.rawValue
    case .createAtomicSwapBid: return ReviewableRequestType.createAtomicSwapBid.rawValue
    case .createPoll: return ReviewableRequestType.createPoll.rawValue
    case .manageOffer: return ReviewableRequestType.manageOffer.rawValue
    case .createPayment: return ReviewableRequestType.createPayment.rawValue
    case .performRedemption: return ReviewableRequestType.performRedemption.rawValue
    case .dataCreation: return ReviewableRequestType.dataCreation.rawValue
    case .dataUpdate: return ReviewableRequestType.dataUpdate.rawValue
    case .dataOwnerUpdate: return ReviewableRequestType.dataOwnerUpdate.rawValue
    case .dataRemove: return ReviewableRequestType.dataRemove.rawValue
    case .createDeferredPayment: return ReviewableRequestType.createDeferredPayment.rawValue
    case .closeDeferredPayment: return ReviewableRequestType.closeDeferredPayment.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .createSale(let data): xdr.append(data.toXDR())
    case .createIssuance(let data): xdr.append(data.toXDR())
    case .createWithdraw(let data): xdr.append(data.toXDR())
    case .createAtomicSwapAsk(let data): xdr.append(data.toXDR())
    case .createAtomicSwapBid(let data): xdr.append(data.toXDR())
    case .createPoll(let data): xdr.append(data.toXDR())
    case .manageOffer(let data): xdr.append(data.toXDR())
    case .createPayment(let data): xdr.append(data.toXDR())
    case .performRedemption(let data): xdr.append(data.toXDR())
    case .dataCreation(let data): xdr.append(data.toXDR())
    case .dataUpdate(let data): xdr.append(data.toXDR())
    case .dataOwnerUpdate(let data): xdr.append(data.toXDR())
    case .dataRemove(let data): xdr.append(data.toXDR())
    case .createDeferredPayment(let data): xdr.append(data.toXDR())
    case .closeDeferredPayment(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case ReviewableRequestType.createSale.rawValue:
      let data = try ReviewableRequestResourceCreateSale(xdrData: &xdrData)
      self = .createSale(data)
    case ReviewableRequestType.createIssuance.rawValue:
      let data = try ReviewableRequestResourceCreateIssuance(xdrData: &xdrData)
      self = .createIssuance(data)
    case ReviewableRequestType.createWithdraw.rawValue:
      let data = try ReviewableRequestResourceCreateWithdraw(xdrData: &xdrData)
      self = .createWithdraw(data)
    case ReviewableRequestType.createAtomicSwapAsk.rawValue:
      let data = try ReviewableRequestResourceCreateAtomicSwapAskExt(xdrData: &xdrData)
      self = .createAtomicSwapAsk(data)
    case ReviewableRequestType.createAtomicSwapBid.rawValue:
      let data = try ReviewableRequestResourceCreateAtomicSwapBidExt(xdrData: &xdrData)
      self = .createAtomicSwapBid(data)
    case ReviewableRequestType.createPoll.rawValue:
      let data = try ReviewableRequestResourceCreatePoll(xdrData: &xdrData)
      self = .createPoll(data)
    case ReviewableRequestType.manageOffer.rawValue:
      let data = try ReviewableRequestResourceManageOffer(xdrData: &xdrData)
      self = .manageOffer(data)
    case ReviewableRequestType.createPayment.rawValue:
      let data = try ReviewableRequestResourceCreatePayment(xdrData: &xdrData)
      self = .createPayment(data)
    case ReviewableRequestType.performRedemption.rawValue:
      let data = try ReviewableRequestResourcePerformRedemption(xdrData: &xdrData)
      self = .performRedemption(data)
    case ReviewableRequestType.dataCreation.rawValue:
      let data = try ReviewableRequestResourceDataCreation(xdrData: &xdrData)
      self = .dataCreation(data)
    case ReviewableRequestType.dataUpdate.rawValue:
      let data = try ReviewableRequestResourceDataUpdate(xdrData: &xdrData)
      self = .dataUpdate(data)
    case ReviewableRequestType.dataOwnerUpdate.rawValue:
      let data = try ReviewableRequestResourceDataOwnerUpdate(xdrData: &xdrData)
      self = .dataOwnerUpdate(data)
    case ReviewableRequestType.dataRemove.rawValue:
      let data = try ReviewableRequestResourceDataRemove(xdrData: &xdrData)
      self = .dataRemove(data)
    case ReviewableRequestType.createDeferredPayment.rawValue:
      let data = try ReviewableRequestResourceCreateDeferredPayment(xdrData: &xdrData)
      self = .createDeferredPayment(data)
    case ReviewableRequestType.closeDeferredPayment.rawValue:
      let data = try ReviewableRequestResourceCloseDeferredPayment(xdrData: &xdrData)
      self = .closeDeferredPayment(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
  public struct ReviewableRequestResourceCreateSale: XDRCodable {
    public var type: Uint64
    public var ext: EmptyExt

    public init(
        type: Uint64,
        ext: EmptyExt) {

      self.type = type
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.type.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.type = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceCreateIssuance: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceCreateWithdraw: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public enum ReviewableRequestResourceCreateAtomicSwapAskExt: XDRDiscriminatedUnion {
    case emptyVersion
    case atomicSwapReturning(ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAsk)

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      case .atomicSwapReturning: return LedgerVersion.atomicSwapReturning.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      case .atomicSwapReturning(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      case LedgerVersion.atomicSwapReturning.rawValue:
        let data = try ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAsk(xdrData: &xdrData)
        self = .atomicSwapReturning(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

    public struct ReviewableRequestResourceCreateAtomicSwapAskExtCreateAtomicSwapAsk: XDRCodable {
      public var assetCode: AssetCode
      public var assetType: Uint64
      public var ext: EmptyExt

      public init(
          assetCode: AssetCode,
          assetType: Uint64,
          ext: EmptyExt) {

        self.assetCode = assetCode
        self.assetType = assetType
        self.ext = ext
      }

      public func toXDR() -> Data {
        var xdr = Data()

        xdr.append(self.assetCode.toXDR())
        xdr.append(self.assetType.toXDR())
        xdr.append(self.ext.toXDR())

        return xdr
      }

      public init(xdrData: inout Data) throws {
        self.assetCode = try AssetCode(xdrData: &xdrData)
        self.assetType = try Uint64(xdrData: &xdrData)
        self.ext = try EmptyExt(xdrData: &xdrData)
      }

    }
  }
  public enum ReviewableRequestResourceCreateAtomicSwapBidExt: XDRDiscriminatedUnion {
    case emptyVersion
    case atomicSwapReturning(ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBid)

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      case .atomicSwapReturning: return LedgerVersion.atomicSwapReturning.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      case .atomicSwapReturning(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      case LedgerVersion.atomicSwapReturning.rawValue:
        let data = try ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBid(xdrData: &xdrData)
        self = .atomicSwapReturning(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

    public struct ReviewableRequestResourceCreateAtomicSwapBidExtCreateAtomicSwapBid: XDRCodable {
      public var assetCode: AssetCode
      public var assetType: Uint64
      public var ext: EmptyExt

      public init(
          assetCode: AssetCode,
          assetType: Uint64,
          ext: EmptyExt) {

        self.assetCode = assetCode
        self.assetType = assetType
        self.ext = ext
      }

      public func toXDR() -> Data {
        var xdr = Data()

        xdr.append(self.assetCode.toXDR())
        xdr.append(self.assetType.toXDR())
        xdr.append(self.ext.toXDR())

        return xdr
      }

      public init(xdrData: inout Data) throws {
        self.assetCode = try AssetCode(xdrData: &xdrData)
        self.assetType = try Uint64(xdrData: &xdrData)
        self.ext = try EmptyExt(xdrData: &xdrData)
      }

    }
  }
  public struct ReviewableRequestResourceCreatePoll: XDRCodable {
    public var permissionType: Uint32
    public var ext: EmptyExt

    public init(
        permissionType: Uint32,
        ext: EmptyExt) {

      self.permissionType = permissionType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.permissionType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.permissionType = try Uint32(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceManageOffer: XDRCodable {
    public var baseAssetType: Uint64
    public var quoteAssetType: Uint64
    public var baseAssetCode: AssetCode
    public var quoteAssetCode: AssetCode
    public var isBuy: Bool
    public var manageAction: Uint32
    public var orderBookID: Uint64
    public var ext: EmptyExt

    public init(
        baseAssetType: Uint64,
        quoteAssetType: Uint64,
        baseAssetCode: AssetCode,
        quoteAssetCode: AssetCode,
        isBuy: Bool,
        manageAction: Uint32,
        orderBookID: Uint64,
        ext: EmptyExt) {

      self.baseAssetType = baseAssetType
      self.quoteAssetType = quoteAssetType
      self.baseAssetCode = baseAssetCode
      self.quoteAssetCode = quoteAssetCode
      self.isBuy = isBuy
      self.manageAction = manageAction
      self.orderBookID = orderBookID
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.baseAssetType.toXDR())
      xdr.append(self.quoteAssetType.toXDR())
      xdr.append(self.baseAssetCode.toXDR())
      xdr.append(self.quoteAssetCode.toXDR())
      xdr.append(self.isBuy.toXDR())
      xdr.append(self.manageAction.toXDR())
      xdr.append(self.orderBookID.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.baseAssetType = try Uint64(xdrData: &xdrData)
      self.quoteAssetType = try Uint64(xdrData: &xdrData)
      self.baseAssetCode = try AssetCode(xdrData: &xdrData)
      self.quoteAssetCode = try AssetCode(xdrData: &xdrData)
      self.isBuy = try Bool(xdrData: &xdrData)
      self.manageAction = try Uint32(xdrData: &xdrData)
      self.orderBookID = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceCreatePayment: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourcePerformRedemption: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceDataCreation: XDRCodable {
    public var type: Uint64
    public var ext: EmptyExt

    public init(
        type: Uint64,
        ext: EmptyExt) {

      self.type = type
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.type.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.type = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceDataUpdate: XDRCodable {
    public var type: Uint64
    public var ext: EmptyExt

    public init(
        type: Uint64,
        ext: EmptyExt) {

      self.type = type
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.type.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.type = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceDataOwnerUpdate: XDRCodable {
    public var type: Uint64
    public var ext: EmptyExt

    public init(
        type: Uint64,
        ext: EmptyExt) {

      self.type = type
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.type.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.type = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceDataRemove: XDRCodable {
    public var type: Uint64
    public var ext: EmptyExt

    public init(
        type: Uint64,
        ext: EmptyExt) {

      self.type = type
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.type.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.type = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceCreateDeferredPayment: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
  public struct ReviewableRequestResourceCloseDeferredPayment: XDRCodable {
    public var assetCode: AssetCode
    public var assetType: Uint64
    public var ext: EmptyExt

    public init(
        assetCode: AssetCode,
        assetType: Uint64,
        ext: EmptyExt) {

      self.assetCode = assetCode
      self.assetType = assetType
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.assetCode.toXDR())
      xdr.append(self.assetType.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.assetCode = try AssetCode(xdrData: &xdrData)
      self.assetType = try Uint64(xdrData: &xdrData)
      self.ext = try EmptyExt(xdrData: &xdrData)
    }

  }
}
