// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LPRemoveLiquiditySuccess
//      {
//          //: Unique identifier of the liquidity pool
//          uint64 liquidityPoolID;
//  
//          //: ID of the first asset balance in LP
//          BalanceID lpFirstAssetBalanceID;
//          //: ID of the second asset balance in LP
//          BalanceID lpSecondAssetBalanceID;
//  
//          //: ID of the first asset balance
//          BalanceID sourceFirstAssetBalanceID;
//          //: ID of the second asset balance
//          BalanceID sourceSecondAssetBalanceID;
//  
//          //: Amount of the first asset
//          uint64 firstAssetAmount;
//          //: Amount of the second asset
//          uint64 secondAssetAmount;
//  
//          //: Reserved for future extension
//          EmptyExt ext;
//      };

//  ===========================================================================
public struct LPRemoveLiquiditySuccess: XDRCodable {
  public var liquidityPoolID: Uint64
  public var lpFirstAssetBalanceID: BalanceID
  public var lpSecondAssetBalanceID: BalanceID
  public var sourceFirstAssetBalanceID: BalanceID
  public var sourceSecondAssetBalanceID: BalanceID
  public var firstAssetAmount: Uint64
  public var secondAssetAmount: Uint64
  public var ext: EmptyExt

  public init(
      liquidityPoolID: Uint64,
      lpFirstAssetBalanceID: BalanceID,
      lpSecondAssetBalanceID: BalanceID,
      sourceFirstAssetBalanceID: BalanceID,
      sourceSecondAssetBalanceID: BalanceID,
      firstAssetAmount: Uint64,
      secondAssetAmount: Uint64,
      ext: EmptyExt) {

    self.liquidityPoolID = liquidityPoolID
    self.lpFirstAssetBalanceID = lpFirstAssetBalanceID
    self.lpSecondAssetBalanceID = lpSecondAssetBalanceID
    self.sourceFirstAssetBalanceID = sourceFirstAssetBalanceID
    self.sourceSecondAssetBalanceID = sourceSecondAssetBalanceID
    self.firstAssetAmount = firstAssetAmount
    self.secondAssetAmount = secondAssetAmount
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.liquidityPoolID.toXDR())
    xdr.append(self.lpFirstAssetBalanceID.toXDR())
    xdr.append(self.lpSecondAssetBalanceID.toXDR())
    xdr.append(self.sourceFirstAssetBalanceID.toXDR())
    xdr.append(self.sourceSecondAssetBalanceID.toXDR())
    xdr.append(self.firstAssetAmount.toXDR())
    xdr.append(self.secondAssetAmount.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.liquidityPoolID = try Uint64(xdrData: &xdrData)
    self.lpFirstAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.lpSecondAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.sourceFirstAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.sourceSecondAssetBalanceID = try BalanceID(xdrData: &xdrData)
    self.firstAssetAmount = try Uint64(xdrData: &xdrData)
    self.secondAssetAmount = try Uint64(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
