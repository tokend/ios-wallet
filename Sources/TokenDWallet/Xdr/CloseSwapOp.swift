// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct CloseSwapOp
//  {
//      //: ID of the swap to close
//      uint64 swapID;
//      //: (optional) Secret of the swap. Must be provided in order for destination of the swap to receive funds
//      Hash* secret;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct CloseSwapOp: XDRCodable {
  public var swapID: Uint64
  public var secret: Hash?
  public var ext: EmptyExt

  public init(
      swapID: Uint64,
      secret: Hash?,
      ext: EmptyExt) {

    self.swapID = swapID
    self.secret = secret
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.swapID.toXDR())
    xdr.append(self.secret.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.swapID = try Uint64(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.secret = try Hash(xdrData: &xdrData)
    } else {
      self.secret = nil
    }
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
