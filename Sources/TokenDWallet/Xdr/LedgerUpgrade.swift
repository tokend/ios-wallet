// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  case TX_EXPIRATION_PERIOD:
//      int64 newTxExpirationPeriod;
//  };

//  ===========================================================================
public enum LedgerUpgrade: XDRDiscriminatedUnion {
  case version(Uint32)
  case maxTxSetSize(Uint32)
  case txExpirationPeriod(Int64)

  public var discriminant: Int32 {
    switch self {
    case .version: return LedgerUpgradeType.version.rawValue
    case .maxTxSetSize: return LedgerUpgradeType.maxTxSetSize.rawValue
    case .txExpirationPeriod: return LedgerUpgradeType.txExpirationPeriod.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .version(let data): xdr.append(data.toXDR())
    case .maxTxSetSize(let data): xdr.append(data.toXDR())
    case .txExpirationPeriod(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case LedgerUpgradeType.version.rawValue:
      let data = try Uint32(xdrData: &xdrData)
      self = .version(data)
    case LedgerUpgradeType.maxTxSetSize.rawValue:
      let data = try Uint32(xdrData: &xdrData)
      self = .maxTxSetSize(data)
    case LedgerUpgradeType.txExpirationPeriod.rawValue:
      let data = try Int64(xdrData: &xdrData)
      self = .txExpirationPeriod(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
}
