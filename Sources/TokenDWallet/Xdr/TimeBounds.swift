// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct TimeBounds
//  {
//      //: specifies inclusive min ledger close time after which transaction is valid
//      uint64 minTime;
//      //: specifies inclusive max ledger close time before which transaction is valid.
//      //: note: transaction will be rejected if max time exceeds close time of current ledger on more then [`tx_expiration_period`](https://tokend.gitlab.io/horizon/#operation/info)
//      uint64 maxTime; // 0 here means no maxTime
//  };

//  ===========================================================================
public struct TimeBounds: XDRCodable {
  public var minTime: Uint64
  public var maxTime: Uint64

  public init(
      minTime: Uint64,
      maxTime: Uint64) {

    self.minTime = minTime
    self.maxTime = maxTime
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.minTime.toXDR())
    xdr.append(self.maxTime.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.minTime = try Uint64(xdrData: &xdrData)
    self.maxTime = try Uint64(xdrData: &xdrData)
  }
}
