// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: OpenSwapSuccess is used to pass saved ledger hash and license hash
//  struct OpenSwapSuccess {
//      uint64 swapID;
//  
//      //: ID of the destination account
//      AccountID destination;
//      //: ID of the destination balance
//      BalanceID destinationBalance;
//  
//      //: Code of an asset used in swap
//      AssetCode asset;
//  
//      //: Fee to be charged from the source balance
//      Fee actualSourceFee;
//      //: Fee to be charged from the destination balance
//      Fee actualDestinationFee;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct OpenSwapSuccess: XDRCodable {
  public var swapID: Uint64
  public var destination: AccountID
  public var destinationBalance: BalanceID
  public var asset: AssetCode
  public var actualSourceFee: Fee
  public var actualDestinationFee: Fee
  public var ext: EmptyExt

  public init(
      swapID: Uint64,
      destination: AccountID,
      destinationBalance: BalanceID,
      asset: AssetCode,
      actualSourceFee: Fee,
      actualDestinationFee: Fee,
      ext: EmptyExt) {

    self.swapID = swapID
    self.destination = destination
    self.destinationBalance = destinationBalance
    self.asset = asset
    self.actualSourceFee = actualSourceFee
    self.actualDestinationFee = actualDestinationFee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.swapID.toXDR())
    xdr.append(self.destination.toXDR())
    xdr.append(self.destinationBalance.toXDR())
    xdr.append(self.asset.toXDR())
    xdr.append(self.actualSourceFee.toXDR())
    xdr.append(self.actualDestinationFee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.swapID = try Uint64(xdrData: &xdrData)
    self.destination = try AccountID(xdrData: &xdrData)
    self.destinationBalance = try BalanceID(xdrData: &xdrData)
    self.asset = try AssetCode(xdrData: &xdrData)
    self.actualSourceFee = try Fee(xdrData: &xdrData)
    self.actualDestinationFee = try Fee(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
