// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: ManageSaleOp is used to cancel a sale, or create a reviewable request which, after approval, will update sale details.
//  struct ManageSaleOp
//  {
//      //: ID of the sale to manage
//      uint64 saleID;
//      //: data is used to pass ManageSaleAction along with required parameters
//      union switch (ManageSaleAction action) {
//      case CREATE_UPDATE_DETAILS_REQUEST:
//          UpdateSaleDetailsData updateSaleDetailsData;
//      case CANCEL:
//          void;
//      case UPDATE_TIME:
//          UpdateTimeData updateTime;
//      } data;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
public struct ManageSaleOp: XDRCodable {
  public var saleID: Uint64
  public var data: ManageSaleOpData
  public var ext: ManageSaleOpExt

  public init(
      saleID: Uint64,
      data: ManageSaleOpData,
      ext: ManageSaleOpExt) {

    self.saleID = saleID
    self.data = data
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.saleID.toXDR())
    xdr.append(self.data.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.saleID = try Uint64(xdrData: &xdrData)
    self.data = try ManageSaleOpData(xdrData: &xdrData)
    self.ext = try ManageSaleOpExt(xdrData: &xdrData)
  }

  public enum ManageSaleOpData: XDRDiscriminatedUnion {
    case createUpdateDetailsRequest(UpdateSaleDetailsData)
    case cancel
    case updateTime(UpdateTimeData)

    public var discriminant: Int32 {
      switch self {
      case .createUpdateDetailsRequest: return ManageSaleAction.createUpdateDetailsRequest.rawValue
      case .cancel: return ManageSaleAction.cancel.rawValue
      case .updateTime: return ManageSaleAction.updateTime.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .createUpdateDetailsRequest(let data): xdr.append(data.toXDR())
      case .cancel: xdr.append(Data())
      case .updateTime(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case ManageSaleAction.createUpdateDetailsRequest.rawValue:
        let data = try UpdateSaleDetailsData(xdrData: &xdrData)
        self = .createUpdateDetailsRequest(data)
      case ManageSaleAction.cancel.rawValue: self = .cancel
      case ManageSaleAction.updateTime.rawValue:
        let data = try UpdateTimeData(xdrData: &xdrData)
        self = .updateTime(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
  public enum ManageSaleOpExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
