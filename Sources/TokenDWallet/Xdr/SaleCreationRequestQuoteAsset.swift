// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: SaleCreationRequestQuoteAsset is a structure that contains an asset code with price
//  struct SaleCreationRequestQuoteAsset {
//      //: AssetCode of quote asset
//      AssetCode quoteAsset; // asset in which participation will be accepted
//      //: Price of sale base asset in relation to a quote asset
//      uint64 price; // price for 1 baseAsset in relation to a quote asset
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct SaleCreationRequestQuoteAsset: XDRCodable {
  public var quoteAsset: AssetCode
  public var price: Uint64
  public var ext: SaleCreationRequestQuoteAssetExt

  public init(
      quoteAsset: AssetCode,
      price: Uint64,
      ext: SaleCreationRequestQuoteAssetExt) {

    self.quoteAsset = quoteAsset
    self.price = price
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.quoteAsset.toXDR())
    xdr.append(self.price.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.quoteAsset = try AssetCode(xdrData: &xdrData)
    self.price = try Uint64(xdrData: &xdrData)
    self.ext = try SaleCreationRequestQuoteAssetExt(xdrData: &xdrData)
  }

  public enum SaleCreationRequestQuoteAssetExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
