// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: CreateAccountOp is used to create new account
//  struct CreateAccountOp
//  {
//      //: ID of account to be created
//      AccountID destination;
//      //: ID of an another account that introduced this account into the system.
//      //: If account with such ID does not exist or it's Admin Account. Referrer won't be set.
//      AccountID* referrer;
//      //: ID of the role that will be attached to an account
//      uint64 roleID;
//  
//      //: Array of data about 'destination' account signers to be created
//      UpdateSignerData signersData<>;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CreateAccountOp: XDRCodable {
  public var destination: AccountID
  public var referrer: AccountID?
  public var roleID: Uint64
  public var signersData: [UpdateSignerData]
  public var ext: CreateAccountOpExt

  public init(
      destination: AccountID,
      referrer: AccountID?,
      roleID: Uint64,
      signersData: [UpdateSignerData],
      ext: CreateAccountOpExt) {

    self.destination = destination
    self.referrer = referrer
    self.roleID = roleID
    self.signersData = signersData
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.destination.toXDR())
    xdr.append(self.referrer.toXDR())
    xdr.append(self.roleID.toXDR())
    xdr.append(self.signersData.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.destination = try AccountID(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.referrer = try AccountID(xdrData: &xdrData)
    } else {
      self.referrer = nil
    }
    self.roleID = try Uint64(xdrData: &xdrData)
    let lengthsignersData = try Int32(xdrData: &xdrData)
    self.signersData = [UpdateSignerData]()
    for _ in 1...lengthsignersData {
      self.signersData.append(try UpdateSignerData(xdrData: &xdrData))
    }
    self.ext = try CreateAccountOpExt(xdrData: &xdrData)
  }

  public enum CreateAccountOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
