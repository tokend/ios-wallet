// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Allows to establish or remove a relationship between a particular fee entry with the different entities
//      struct SetFeesOp
//      {
//          //: Fee entry to set
//          FeeEntry* fee;
//          //: `isDelete` indicates that a fee should be either set or removed
//          bool isDelete;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//      };

//  ===========================================================================
public struct SetFeesOp: XDRCodable {
  public var fee: FeeEntry?
  public var isDelete: Bool
  public var ext: SetFeesOpExt

  public init(
      fee: FeeEntry?,
      isDelete: Bool,
      ext: SetFeesOpExt) {

    self.fee = fee
    self.isDelete = isDelete
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.fee.toXDR())
    xdr.append(self.isDelete.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    if (try Bool(xdrData: &xdrData)) {
      self.fee = try FeeEntry(xdrData: &xdrData)
    } else {
      self.fee = nil
    }
    self.isDelete = try Bool(xdrData: &xdrData)
    self.ext = try SetFeesOpExt(xdrData: &xdrData)
  }

  public enum SetFeesOpExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
