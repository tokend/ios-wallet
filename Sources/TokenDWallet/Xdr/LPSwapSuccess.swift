// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LPSwapSuccess
//      {
//          //: Unique identifier of the liquidity pool
//          uint64 liquidityPoolID;
//  
//          //: ID of the pool account
//          AccountID poolAccount;
//  
//          //: ID of the in balance for LP
//          BalanceID lpInBalanceID;
//          //: ID of the out balance for LP
//          BalanceID lpOutBalanceID;
//  
//          //: ID of the in balance for source
//          BalanceID sourceInBalanceID;
//          //: ID of the out balance for source
//          BalanceID sourceOutBalanceID;
//  
//          //: Amount of the in asset used for swap
//          uint64 swapInAmount;
//          //: Amount of the out asset received from swap
//          uint64 swapOutAmount;
//  
//          //: Fee charged from the source balance
//          Fee actualSourcePaymentFee;
//          //: Fee charged from the destination balance
//          Fee actualDestinationPaymentFee;
//  
//          //: Reserved for future extension
//          EmptyExt ext;
//      };

//  ===========================================================================
public struct LPSwapSuccess: XDRCodable {
  public var liquidityPoolID: Uint64
  public var poolAccount: AccountID
  public var lpInBalanceID: BalanceID
  public var lpOutBalanceID: BalanceID
  public var sourceInBalanceID: BalanceID
  public var sourceOutBalanceID: BalanceID
  public var swapInAmount: Uint64
  public var swapOutAmount: Uint64
  public var actualSourcePaymentFee: Fee
  public var actualDestinationPaymentFee: Fee
  public var ext: EmptyExt

  public init(
      liquidityPoolID: Uint64,
      poolAccount: AccountID,
      lpInBalanceID: BalanceID,
      lpOutBalanceID: BalanceID,
      sourceInBalanceID: BalanceID,
      sourceOutBalanceID: BalanceID,
      swapInAmount: Uint64,
      swapOutAmount: Uint64,
      actualSourcePaymentFee: Fee,
      actualDestinationPaymentFee: Fee,
      ext: EmptyExt) {

    self.liquidityPoolID = liquidityPoolID
    self.poolAccount = poolAccount
    self.lpInBalanceID = lpInBalanceID
    self.lpOutBalanceID = lpOutBalanceID
    self.sourceInBalanceID = sourceInBalanceID
    self.sourceOutBalanceID = sourceOutBalanceID
    self.swapInAmount = swapInAmount
    self.swapOutAmount = swapOutAmount
    self.actualSourcePaymentFee = actualSourcePaymentFee
    self.actualDestinationPaymentFee = actualDestinationPaymentFee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.liquidityPoolID.toXDR())
    xdr.append(self.poolAccount.toXDR())
    xdr.append(self.lpInBalanceID.toXDR())
    xdr.append(self.lpOutBalanceID.toXDR())
    xdr.append(self.sourceInBalanceID.toXDR())
    xdr.append(self.sourceOutBalanceID.toXDR())
    xdr.append(self.swapInAmount.toXDR())
    xdr.append(self.swapOutAmount.toXDR())
    xdr.append(self.actualSourcePaymentFee.toXDR())
    xdr.append(self.actualDestinationPaymentFee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.liquidityPoolID = try Uint64(xdrData: &xdrData)
    self.poolAccount = try AccountID(xdrData: &xdrData)
    self.lpInBalanceID = try BalanceID(xdrData: &xdrData)
    self.lpOutBalanceID = try BalanceID(xdrData: &xdrData)
    self.sourceInBalanceID = try BalanceID(xdrData: &xdrData)
    self.sourceOutBalanceID = try BalanceID(xdrData: &xdrData)
    self.swapInAmount = try Uint64(xdrData: &xdrData)
    self.swapOutAmount = try Uint64(xdrData: &xdrData)
    self.actualSourcePaymentFee = try Fee(xdrData: &xdrData)
    self.actualDestinationPaymentFee = try Fee(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
