// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: CreateExternalSystemAccountIdPoolEntryActionInput is used to
//  //: pass necessary params to create a new external system account ID in the external system ID pool
//  struct CreateExternalSystemAccountIdPoolEntryActionInput
//  {
//      //: Type of external system, selected arbitrarily
//      int32 externalSystemType;
//      //: Data for external system binding
//      longstring data;
//      //: External system ID of the creator
//      uint64 parent;
//  
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CreateExternalSystemAccountIdPoolEntryActionInput: XDRCodable {
  public var externalSystemType: Int32
  public var data: Longstring
  public var parent: Uint64
  public var ext: CreateExternalSystemAccountIdPoolEntryActionInputExt

  public init(
      externalSystemType: Int32,
      data: Longstring,
      parent: Uint64,
      ext: CreateExternalSystemAccountIdPoolEntryActionInputExt) {

    self.externalSystemType = externalSystemType
    self.data = data
    self.parent = parent
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.externalSystemType.toXDR())
    xdr.append(self.data.toXDR())
    xdr.append(self.parent.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.externalSystemType = try Int32(xdrData: &xdrData)
    self.data = try Longstring(xdrData: &xdrData)
    self.parent = try Uint64(xdrData: &xdrData)
    self.ext = try CreateExternalSystemAccountIdPoolEntryActionInputExt(xdrData: &xdrData)
  }

  public enum CreateExternalSystemAccountIdPoolEntryActionInputExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
