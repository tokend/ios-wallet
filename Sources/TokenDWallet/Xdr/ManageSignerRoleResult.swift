// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Result of operation application
//  union ManageSignerRoleResult switch (ManageSignerRoleResultCode code)
//  {
//      case SUCCESS:
//          struct
//          {
//              //: id of a role that was managed
//              uint64 roleID;
//  
//              //: reserved for future use
//              union switch (LedgerVersion v)
//              {
//              case EMPTY_VERSION:
//                  void;
//              }
//              ext;
//          } success;
//      case RULE_ID_DUPLICATION:
//      case DEFAULT_RULE_ID_DUPLICATION:
//      case NO_SUCH_RULE:
//          //: ID of a rule that was either duplicated or is default or does not exist
//          uint64 ruleID;
//      case TOO_MANY_RULE_IDS:
//          //: max count of rule ids that can be passed in `ruleIDs` array
//          uint64 maxRuleIDsCount;
//      default:
//          void;
//  };

//  ===========================================================================
public enum ManageSignerRoleResult: XDRDiscriminatedUnion {
  case success(ManageSignerRoleResultSuccess)
  case ruleIdDuplication(Uint64)
  case defaultRuleIdDuplication(Uint64)
  case noSuchRule(Uint64)
  case tooManyRuleIds(Uint64)

  public var discriminant: Int32 {
    switch self {
    case .success: return ManageSignerRoleResultCode.success.rawValue
    case .ruleIdDuplication: return ManageSignerRoleResultCode.ruleIdDuplication.rawValue
    case .defaultRuleIdDuplication: return ManageSignerRoleResultCode.defaultRuleIdDuplication.rawValue
    case .noSuchRule: return ManageSignerRoleResultCode.noSuchRule.rawValue
    case .tooManyRuleIds: return ManageSignerRoleResultCode.tooManyRuleIds.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .success(let data): xdr.append(data.toXDR())
    case .ruleIdDuplication(let data): xdr.append(data.toXDR())
    case .defaultRuleIdDuplication(let data): xdr.append(data.toXDR())
    case .noSuchRule(let data): xdr.append(data.toXDR())
    case .tooManyRuleIds(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case ManageSignerRoleResultCode.success.rawValue:
      let data = try ManageSignerRoleResultSuccess(xdrData: &xdrData)
      self = .success(data)
    case ManageSignerRoleResultCode.ruleIdDuplication.rawValue:
      let data = try Uint64(xdrData: &xdrData)
      self = .ruleIdDuplication(data)
    case ManageSignerRoleResultCode.defaultRuleIdDuplication.rawValue:
      let data = try Uint64(xdrData: &xdrData)
      self = .defaultRuleIdDuplication(data)
    case ManageSignerRoleResultCode.noSuchRule.rawValue:
      let data = try Uint64(xdrData: &xdrData)
      self = .noSuchRule(data)
    case ManageSignerRoleResultCode.tooManyRuleIds.rawValue:
      let data = try Uint64(xdrData: &xdrData)
      self = .tooManyRuleIds(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
  public struct ManageSignerRoleResultSuccess: XDRCodable {
    public var roleID: Uint64
    public var ext: ManageSignerRoleResultSuccessExt

    public init(
        roleID: Uint64,
        ext: ManageSignerRoleResultSuccessExt) {

      self.roleID = roleID
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.roleID.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.roleID = try Uint64(xdrData: &xdrData)
      self.ext = try ManageSignerRoleResultSuccessExt(xdrData: &xdrData)
    }

    public enum ManageSignerRoleResultSuccessExt: XDRDiscriminatedUnion {
      case emptyVersion

      public var discriminant: Int32 {
        switch self {
        case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
        }
      }

      public func toXDR() -> Data {
        var xdr = Data()

        xdr.append(self.discriminant.toXDR())

        switch self {
        case .emptyVersion: xdr.append(Data())
        }

        return xdr
      }

      public init(xdrData: inout Data) throws {
        let discriminant = try Int32(xdrData: &xdrData)

        switch discriminant {
        case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
        default:
          throw XDRErrors.unknownEnumCase
        }
      }

    }
  }
}
