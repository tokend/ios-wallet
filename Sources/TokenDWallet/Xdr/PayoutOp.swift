// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct PayoutOp
//  {
//      AssetCode asset; // asset, which holders will receive dividends
//      BalanceID sourceBalanceID; // balance, from which payout will be performed
//  
//      uint64 maxPayoutAmount; // max amount of asset, that owner wants to pay out
//      uint64 minPayoutAmount; // min tokens amount which will be payed for one balance;
//      uint64 minAssetHolderAmount; // min tokens amount for which holder will received dividends
//  
//      Fee fee;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct PayoutOp: XDRCodable {
  public var asset: AssetCode
  public var sourceBalanceID: BalanceID
  public var maxPayoutAmount: Uint64
  public var minPayoutAmount: Uint64
  public var minAssetHolderAmount: Uint64
  public var fee: Fee
  public var ext: PayoutOpExt

  public init(
      asset: AssetCode,
      sourceBalanceID: BalanceID,
      maxPayoutAmount: Uint64,
      minPayoutAmount: Uint64,
      minAssetHolderAmount: Uint64,
      fee: Fee,
      ext: PayoutOpExt) {

    self.asset = asset
    self.sourceBalanceID = sourceBalanceID
    self.maxPayoutAmount = maxPayoutAmount
    self.minPayoutAmount = minPayoutAmount
    self.minAssetHolderAmount = minAssetHolderAmount
    self.fee = fee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.asset.toXDR())
    xdr.append(self.sourceBalanceID.toXDR())
    xdr.append(self.maxPayoutAmount.toXDR())
    xdr.append(self.minPayoutAmount.toXDR())
    xdr.append(self.minAssetHolderAmount.toXDR())
    xdr.append(self.fee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.asset = try AssetCode(xdrData: &xdrData)
    self.sourceBalanceID = try BalanceID(xdrData: &xdrData)
    self.maxPayoutAmount = try Uint64(xdrData: &xdrData)
    self.minPayoutAmount = try Uint64(xdrData: &xdrData)
    self.minAssetHolderAmount = try Uint64(xdrData: &xdrData)
    self.fee = try Fee(xdrData: &xdrData)
    self.ext = try PayoutOpExt(xdrData: &xdrData)
  }

  public enum PayoutOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
