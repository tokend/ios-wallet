// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Result of operation application
//  union CreateAccountResult switch (CreateAccountResultCode code)
//  {
//  case SUCCESS:
//      CreateAccountSuccess success;
//  case INVALID_SIGNER_DATA:
//      //: `createSignerErrorCode` is used to determine the reason of signer creation failure
//      ManageSignerResultCode createSignerErrorCode;
//  default:
//      void;
//  };

//  ===========================================================================
public enum CreateAccountResult: XDRDiscriminatedUnion {
  case success(CreateAccountSuccess)
  case invalidSignerData(ManageSignerResultCode)

  public var discriminant: Int32 {
    switch self {
    case .success: return CreateAccountResultCode.success.rawValue
    case .invalidSignerData: return CreateAccountResultCode.invalidSignerData.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .success(let data): xdr.append(data.toXDR())
    case .invalidSignerData(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case CreateAccountResultCode.success.rawValue:
      let data = try CreateAccountSuccess(xdrData: &xdrData)
      self = .success(data)
    case CreateAccountResultCode.invalidSignerData.rawValue:
      let data = try ManageSignerResultCode(xdrData: &xdrData)
      self = .invalidSignerData(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
}
