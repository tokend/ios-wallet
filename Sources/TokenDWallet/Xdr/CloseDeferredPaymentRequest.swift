// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct CloseDeferredPaymentRequest {
//      uint64 deferredPaymentID;
//  
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (CloseDeferredPaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//  
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//      longstring creatorDetails; // details set by requester
//  
//      uint64 amount;
//  
//      uint32 sequenceNumber;
//  
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct CloseDeferredPaymentRequest: XDRCodable {
  public var deferredPaymentID: Uint64
  public var destination: CloseDeferredPaymentRequestDestination
  public var creatorDetails: Longstring
  public var amount: Uint64
  public var sequenceNumber: Uint32
  public var ext: EmptyExt

  public init(
      deferredPaymentID: Uint64,
      destination: CloseDeferredPaymentRequestDestination,
      creatorDetails: Longstring,
      amount: Uint64,
      sequenceNumber: Uint32,
      ext: EmptyExt) {

    self.deferredPaymentID = deferredPaymentID
    self.destination = destination
    self.creatorDetails = creatorDetails
    self.amount = amount
    self.sequenceNumber = sequenceNumber
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.deferredPaymentID.toXDR())
    xdr.append(self.destination.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.sequenceNumber.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.deferredPaymentID = try Uint64(xdrData: &xdrData)
    self.destination = try CloseDeferredPaymentRequestDestination(xdrData: &xdrData)
    self.creatorDetails = try Longstring(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.sequenceNumber = try Uint32(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }

  public enum CloseDeferredPaymentRequestDestination: XDRDiscriminatedUnion {
    case account(AccountID)
    case balance(BalanceID)

    public var discriminant: Int32 {
      switch self {
      case .account: return CloseDeferredPaymentDestinationType.account.rawValue
      case .balance: return CloseDeferredPaymentDestinationType.balance.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .account(let data): xdr.append(data.toXDR())
      case .balance(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case CloseDeferredPaymentDestinationType.account.rawValue:
        let data = try AccountID(xdrData: &xdrData)
        self = .account(data)
      case CloseDeferredPaymentDestinationType.balance.rawValue:
        let data = try BalanceID(xdrData: &xdrData)
        self = .balance(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
