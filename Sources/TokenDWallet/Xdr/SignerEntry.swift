// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct SignerEntry
//  {
//      PublicKey pubKey;
//      AccountID accountID; // account to which signer had attached
//  
//      uint32 weight; // threshold for all SignerRules equals 1000
//  	uint32 identity;
//  
//  	longstring details;
//  
//  	uint64 roleID;
//  
//  	 // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct SignerEntry: XDRCodable {
  public var pubKey: PublicKey
  public var accountID: AccountID
  public var weight: Uint32
  public var identity: Uint32
  public var details: Longstring
  public var roleID: Uint64
  public var ext: SignerEntryExt

  public init(
      pubKey: PublicKey,
      accountID: AccountID,
      weight: Uint32,
      identity: Uint32,
      details: Longstring,
      roleID: Uint64,
      ext: SignerEntryExt) {

    self.pubKey = pubKey
    self.accountID = accountID
    self.weight = weight
    self.identity = identity
    self.details = details
    self.roleID = roleID
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.pubKey.toXDR())
    xdr.append(self.accountID.toXDR())
    xdr.append(self.weight.toXDR())
    xdr.append(self.identity.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.roleID.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.pubKey = try PublicKey(xdrData: &xdrData)
    self.accountID = try AccountID(xdrData: &xdrData)
    self.weight = try Uint32(xdrData: &xdrData)
    self.identity = try Uint32(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.roleID = try Uint64(xdrData: &xdrData)
    self.ext = try SignerEntryExt(xdrData: &xdrData)
  }

  public enum SignerEntryExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
