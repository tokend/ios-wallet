// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  union PublicKey switch (CryptoKeyType type)
//  {
//  case KEY_TYPE_ED25519:
//      uint256 ed25519;
//  };

//  ===========================================================================
public enum PublicKey: XDRDiscriminatedUnion {
  case keyTypeEd25519(Uint256)

  public var discriminant: Int32 {
    switch self {
    case .keyTypeEd25519: return CryptoKeyType.keyTypeEd25519.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .keyTypeEd25519(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case CryptoKeyType.keyTypeEd25519.rawValue:
      let data = try Uint256(xdrData: &xdrData)
      self = .keyTypeEd25519(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
}
