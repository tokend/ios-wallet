// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct AtomicSwapAskEntry
//  {
//      uint64 id;
//      AccountID ownerID;
//      AssetCode baseAsset;
//      BalanceID baseBalance;
//      uint64 amount;
//      uint64 lockedAmount;
//      uint64 createdAt;
//  
//      bool isCancelled;
//  
//      longstring details;
//  
//      AtomicSwapAskQuoteAsset quoteAssets<>;
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct AtomicSwapAskEntry: XDRCodable {
  public var id: Uint64
  public var ownerID: AccountID
  public var baseAsset: AssetCode
  public var baseBalance: BalanceID
  public var amount: Uint64
  public var lockedAmount: Uint64
  public var createdAt: Uint64
  public var isCancelled: Bool
  public var details: Longstring
  public var quoteAssets: [AtomicSwapAskQuoteAsset]
  public var ext: AtomicSwapAskEntryExt

  public init(
      id: Uint64,
      ownerID: AccountID,
      baseAsset: AssetCode,
      baseBalance: BalanceID,
      amount: Uint64,
      lockedAmount: Uint64,
      createdAt: Uint64,
      isCancelled: Bool,
      details: Longstring,
      quoteAssets: [AtomicSwapAskQuoteAsset],
      ext: AtomicSwapAskEntryExt) {

    self.id = id
    self.ownerID = ownerID
    self.baseAsset = baseAsset
    self.baseBalance = baseBalance
    self.amount = amount
    self.lockedAmount = lockedAmount
    self.createdAt = createdAt
    self.isCancelled = isCancelled
    self.details = details
    self.quoteAssets = quoteAssets
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.id.toXDR())
    xdr.append(self.ownerID.toXDR())
    xdr.append(self.baseAsset.toXDR())
    xdr.append(self.baseBalance.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.lockedAmount.toXDR())
    xdr.append(self.createdAt.toXDR())
    xdr.append(self.isCancelled.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.quoteAssets.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.id = try Uint64(xdrData: &xdrData)
    self.ownerID = try AccountID(xdrData: &xdrData)
    self.baseAsset = try AssetCode(xdrData: &xdrData)
    self.baseBalance = try BalanceID(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.lockedAmount = try Uint64(xdrData: &xdrData)
    self.createdAt = try Uint64(xdrData: &xdrData)
    self.isCancelled = try Bool(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    let lengthquoteAssets = try Int32(xdrData: &xdrData)
    self.quoteAssets = [AtomicSwapAskQuoteAsset]()
    for _ in 1...lengthquoteAssets {
      self.quoteAssets.append(try AtomicSwapAskQuoteAsset(xdrData: &xdrData))
    }
    self.ext = try AtomicSwapAskEntryExt(xdrData: &xdrData)
  }

  public enum AtomicSwapAskEntryExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
