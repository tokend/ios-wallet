// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: PaymentOp is used to transfer some amount of asset from the source balance to destination account/balance
//  struct PaymentOp
//  {
//      //: ID of the source balance of payment
//      BalanceID sourceBalanceID;
//  
//      //: `destination` defines the type of instance that receives the payment based on given PaymentDestinationType
//      union switch (PaymentDestinationType type) {
//          case ACCOUNT:
//              AccountID accountID;
//          case BALANCE:
//              BalanceID balanceID;
//      } destination;
//  
//      //: Amount of payment
//      uint64 amount;
//  
//      //: `feeData` defines all data about the payment fee
//      PaymentFeeData feeData;
//  
//      //: `subject` is a user-provided info about the real-life purpose of payment
//      longstring subject;
//      //: `reference` is a string formed by a payment sender. `Reference-sender account` pair is unique.
//      longstring reference;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct PaymentOp: XDRCodable {
  public var sourceBalanceID: BalanceID
  public var destination: PaymentOpDestination
  public var amount: Uint64
  public var feeData: PaymentFeeData
  public var subject: Longstring
  public var reference: Longstring
  public var ext: PaymentOpExt

  public init(
      sourceBalanceID: BalanceID,
      destination: PaymentOpDestination,
      amount: Uint64,
      feeData: PaymentFeeData,
      subject: Longstring,
      reference: Longstring,
      ext: PaymentOpExt) {

    self.sourceBalanceID = sourceBalanceID
    self.destination = destination
    self.amount = amount
    self.feeData = feeData
    self.subject = subject
    self.reference = reference
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.sourceBalanceID.toXDR())
    xdr.append(self.destination.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.feeData.toXDR())
    xdr.append(self.subject.toXDR())
    xdr.append(self.reference.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.sourceBalanceID = try BalanceID(xdrData: &xdrData)
    self.destination = try PaymentOpDestination(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.feeData = try PaymentFeeData(xdrData: &xdrData)
    self.subject = try Longstring(xdrData: &xdrData)
    self.reference = try Longstring(xdrData: &xdrData)
    self.ext = try PaymentOpExt(xdrData: &xdrData)
  }

  public enum PaymentOpDestination: XDRDiscriminatedUnion {
    case account(AccountID)
    case balance(BalanceID)

    public var discriminant: Int32 {
      switch self {
      case .account: return PaymentDestinationType.account.rawValue
      case .balance: return PaymentDestinationType.balance.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .account(let data): xdr.append(data.toXDR())
      case .balance(let data): xdr.append(data.toXDR())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case PaymentDestinationType.account.rawValue:
        let data = try AccountID(xdrData: &xdrData)
        self = .account(data)
      case PaymentDestinationType.balance.rawValue:
        let data = try BalanceID(xdrData: &xdrData)
        self = .balance(data)
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
  public enum PaymentOpExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
