// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: UpdateSignerData is used to pass necessary data to create or update the signer
//  struct UpdateSignerData
//  {
//      //: Public key of a signer
//      PublicKey publicKey;
//      //: id of the role that will be attached to a signer
//      uint64 roleID;
//  
//      //: weight that signer will have, threshold for all SignerRequirements equals 1000
//      uint32 weight;
//      //: If there are some signers with equal identity, only one signer will be chosen 
//      //: (either the one with the biggest weight or the one who was the first to satisfy a threshold) 
//      uint32 identity;
//  
//      //: Arbitrary stringified json object with details that will be attached to signer
//      longstring details;
//  
//      //: reserved for future extension
//      EmptyExt ext;
//  };

//  ===========================================================================
public struct UpdateSignerData: XDRCodable {
  public var publicKey: PublicKey
  public var roleID: Uint64
  public var weight: Uint32
  public var identity: Uint32
  public var details: Longstring
  public var ext: EmptyExt

  public init(
      publicKey: PublicKey,
      roleID: Uint64,
      weight: Uint32,
      identity: Uint32,
      details: Longstring,
      ext: EmptyExt) {

    self.publicKey = publicKey
    self.roleID = roleID
    self.weight = weight
    self.identity = identity
    self.details = details
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.publicKey.toXDR())
    xdr.append(self.roleID.toXDR())
    xdr.append(self.weight.toXDR())
    xdr.append(self.identity.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.publicKey = try PublicKey(xdrData: &xdrData)
    self.roleID = try Uint64(xdrData: &xdrData)
    self.weight = try Uint32(xdrData: &xdrData)
    self.identity = try Uint32(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.ext = try EmptyExt(xdrData: &xdrData)
  }
}
