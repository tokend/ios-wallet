// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Result of `CreatePreIssuanceRequest` operation application along with the result code
//  union CreatePreIssuanceRequestResult switch (CreatePreIssuanceRequestResultCode code)
//  {
//  case SUCCESS:
//      //: Result of successful application of `CreatePreIssuanceRequest` operation
//      struct
//      {
//          //: ID of created or updated request
//          uint64 requestID;
//          //: Indicates whether or not the request was auto approved and fulfilled
//          bool fulfilled;
//          //: reserved for future use
//          union switch (LedgerVersion v)
//          {
//          case EMPTY_VERSION:
//              void;
//          }
//          ext;
//  	} success;
//  default:
//      void;
//  };

//  ===========================================================================
public enum CreatePreIssuanceRequestResult: XDRDiscriminatedUnion {
  case success(CreatePreIssuanceRequestResultSuccess)

  public var discriminant: Int32 {
    switch self {
    case .success: return CreatePreIssuanceRequestResultCode.success.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .success(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case CreatePreIssuanceRequestResultCode.success.rawValue:
      let data = try CreatePreIssuanceRequestResultSuccess(xdrData: &xdrData)
      self = .success(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
  public struct CreatePreIssuanceRequestResultSuccess: XDRCodable {
    public var requestID: Uint64
    public var fulfilled: Bool
    public var ext: CreatePreIssuanceRequestResultSuccessExt

    public init(
        requestID: Uint64,
        fulfilled: Bool,
        ext: CreatePreIssuanceRequestResultSuccessExt) {

      self.requestID = requestID
      self.fulfilled = fulfilled
      self.ext = ext
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.requestID.toXDR())
      xdr.append(self.fulfilled.toXDR())
      xdr.append(self.ext.toXDR())

      return xdr
    }

    public init(xdrData: inout Data) throws {
      self.requestID = try Uint64(xdrData: &xdrData)
      self.fulfilled = try Bool(xdrData: &xdrData)
      self.ext = try CreatePreIssuanceRequestResultSuccessExt(xdrData: &xdrData)
    }

    public enum CreatePreIssuanceRequestResultSuccessExt: XDRDiscriminatedUnion {
      case emptyVersion

      public var discriminant: Int32 {
        switch self {
        case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
        }
      }

      public func toXDR() -> Data {
        var xdr = Data()

        xdr.append(self.discriminant.toXDR())

        switch self {
        case .emptyVersion: xdr.append(Data())
        }

        return xdr
      }

      public init(xdrData: inout Data) throws {
        let discriminant = try Int32(xdrData: &xdrData)

        switch discriminant {
        case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
        default:
          throw XDRErrors.unknownEnumCase
        }
      }

    }
  }
}
