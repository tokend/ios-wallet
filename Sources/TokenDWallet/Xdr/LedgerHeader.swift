// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//  
//      uint32 ledgerSeq; // sequence number of this ledger
//  
//      IdGenerator idGenerators<>; // generators of ids
//  
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//  
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//  
//      int64 txExpirationPeriod;
//      
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//  
//      // reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct LedgerHeader: XDREncodable {
  public var ledgerVersion: Uint32
  public var previousLedgerHash: Hash
  public var scpValue: StellarValue
  public var txSetResultHash: Hash
  public var bucketListHash: Hash
  public var ledgerSeq: Uint32
  public var idGenerators: [IdGenerator]
  public var baseFee: Uint32
  public var baseReserve: Uint32
  public var maxTxSetSize: Uint32
  public var txExpirationPeriod: Int64
//  public var skipList: XDRArrayFixed<Hash>
  public var ext: LedgerHeaderExt

  public init(
      ledgerVersion: Uint32,
      previousLedgerHash: Hash,
      scpValue: StellarValue,
      txSetResultHash: Hash,
      bucketListHash: Hash,
      ledgerSeq: Uint32,
      idGenerators: [IdGenerator],
      baseFee: Uint32,
      baseReserve: Uint32,
      maxTxSetSize: Uint32,
      txExpirationPeriod: Int64,
//      skipList: XDRArrayFixed<Hash>,
      ext: LedgerHeaderExt) {

    self.ledgerVersion = ledgerVersion
    self.previousLedgerHash = previousLedgerHash
    self.scpValue = scpValue
    self.txSetResultHash = txSetResultHash
    self.bucketListHash = bucketListHash
    self.ledgerSeq = ledgerSeq
    self.idGenerators = idGenerators
    self.baseFee = baseFee
    self.baseReserve = baseReserve
    self.maxTxSetSize = maxTxSetSize
    self.txExpirationPeriod = txExpirationPeriod
//    self.skipList = skipList
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.ledgerVersion.toXDR())
    xdr.append(self.previousLedgerHash.toXDR())
    xdr.append(self.scpValue.toXDR())
    xdr.append(self.txSetResultHash.toXDR())
    xdr.append(self.bucketListHash.toXDR())
    xdr.append(self.ledgerSeq.toXDR())
    xdr.append(self.idGenerators.toXDR())
    xdr.append(self.baseFee.toXDR())
    xdr.append(self.baseReserve.toXDR())
    xdr.append(self.maxTxSetSize.toXDR())
    xdr.append(self.txExpirationPeriod.toXDR())
//    xdr.append(self.skipList.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public enum LedgerHeaderExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

  }
}
