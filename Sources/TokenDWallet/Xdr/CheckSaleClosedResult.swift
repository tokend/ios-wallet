// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Entry for additional information regarding sale closing
//  struct CheckSaleClosedResult {
//      //: AccountID of the sale owner
//      AccountID saleOwner;
//      //: Array of individual's contribution details
//      CheckSubSaleClosedResult results<>;
//      //: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//        case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CheckSaleClosedResult: XDRCodable {
  public var saleOwner: AccountID
  public var results: [CheckSubSaleClosedResult]
  public var ext: CheckSaleClosedResultExt

  public init(
      saleOwner: AccountID,
      results: [CheckSubSaleClosedResult],
      ext: CheckSaleClosedResultExt) {

    self.saleOwner = saleOwner
    self.results = results
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.saleOwner.toXDR())
    xdr.append(self.results.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.saleOwner = try AccountID(xdrData: &xdrData)
    let lengthresults = try Int32(xdrData: &xdrData)
    self.results = [CheckSubSaleClosedResult]()
    for _ in 1...lengthresults {
      self.results.append(try CheckSubSaleClosedResult(xdrData: &xdrData))
    }
    self.ext = try CheckSaleClosedResultExt(xdrData: &xdrData)
  }

  public enum CheckSaleClosedResultExt: XDRDiscriminatedUnion {
    case emptyVersion

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion: xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
