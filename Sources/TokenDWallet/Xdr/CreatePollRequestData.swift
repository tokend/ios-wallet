// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: CreatePollRequestData is used to pass necessary data to create a `CREATE_POLL` request
//  struct CreatePollRequestData
//  {
//      //: Body of `CREATE_POLL` request
//      CreatePollRequest request;
//  
//      //: Bit mask that will be used instead of the value from key-value entry by
//      //: `create_poll_tasks:<permissionType>` key
//      uint32* allTasks;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public struct CreatePollRequestData: XDRCodable {
  public var request: CreatePollRequest
  public var allTasks: Uint32?
  public var ext: CreatePollRequestDataExt

  public init(
      request: CreatePollRequest,
      allTasks: Uint32?,
      ext: CreatePollRequestDataExt) {

    self.request = request
    self.allTasks = allTasks
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.request.toXDR())
    xdr.append(self.allTasks.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.request = try CreatePollRequest(xdrData: &xdrData)
    if (try Bool(xdrData: &xdrData)) {
      self.allTasks = try Uint32(xdrData: &xdrData)
    } else {
      self.allTasks = nil
    }
    self.ext = try CreatePollRequestDataExt(xdrData: &xdrData)
  }

  public enum CreatePollRequestDataExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
