// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Body of reviewable `IssuanceRequest`, contains parameters regarding issuance
//  struct IssuanceRequest {
//      //: Code of an asset to issue
//  	AssetCode asset;
//     //: Amount to issue
//  	uint64 amount;
//      //: Balance to issue on
//  	BalanceID receiver;
//      //: Arbitrary stringified json object that can be used to attach data to be reviewed by an admin
//  	longstring creatorDetails; // details of the issuance (External system id, etc.)
//      //: Total fee to pay, consists of fixed fee and percent fee, calculated automatically
//  	Fee fee; //totalFee to be payed (calculated automatically)
//  	//: Reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      }
//    ext;
//  };

//  ===========================================================================
public struct IssuanceRequest: XDRCodable {
  public var asset: AssetCode
  public var amount: Uint64
  public var receiver: BalanceID
  public var creatorDetails: Longstring
  public var fee: Fee
  public var ext: IssuanceRequestExt

  public init(
      asset: AssetCode,
      amount: Uint64,
      receiver: BalanceID,
      creatorDetails: Longstring,
      fee: Fee,
      ext: IssuanceRequestExt) {

    self.asset = asset
    self.amount = amount
    self.receiver = receiver
    self.creatorDetails = creatorDetails
    self.fee = fee
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.asset.toXDR())
    xdr.append(self.amount.toXDR())
    xdr.append(self.receiver.toXDR())
    xdr.append(self.creatorDetails.toXDR())
    xdr.append(self.fee.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    self.asset = try AssetCode(xdrData: &xdrData)
    self.amount = try Uint64(xdrData: &xdrData)
    self.receiver = try BalanceID(xdrData: &xdrData)
    self.creatorDetails = try Longstring(xdrData: &xdrData)
    self.fee = try Fee(xdrData: &xdrData)
    self.ext = try IssuanceRequestExt(xdrData: &xdrData)
  }

  public enum IssuanceRequestExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
