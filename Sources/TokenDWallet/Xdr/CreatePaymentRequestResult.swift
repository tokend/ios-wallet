// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: Result of CreatePaymentRequestOp application
//  union CreatePaymentRequestResult switch (CreatePaymentRequestResultCode code) 
//  {
//  case SUCCESS:
//      CreatePaymentRequestSuccessResult success;
//  case INVALID_PAYMENT:
//      PaymentResultCode paymentCode;
//  default:
//      void;
//  };

//  ===========================================================================
public enum CreatePaymentRequestResult: XDRDiscriminatedUnion {
  case success(CreatePaymentRequestSuccessResult)
  case invalidPayment(PaymentResultCode)

  public var discriminant: Int32 {
    switch self {
    case .success: return CreatePaymentRequestResultCode.success.rawValue
    case .invalidPayment: return CreatePaymentRequestResultCode.invalidPayment.rawValue
    }
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.discriminant.toXDR())

    switch self {
    case .success(let data): xdr.append(data.toXDR())
    case .invalidPayment(let data): xdr.append(data.toXDR())
    }

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let discriminant = try Int32(xdrData: &xdrData)

    switch discriminant {
    case CreatePaymentRequestResultCode.success.rawValue:
      let data = try CreatePaymentRequestSuccessResult(xdrData: &xdrData)
      self = .success(data)
    case CreatePaymentRequestResultCode.invalidPayment.rawValue:
      let data = try PaymentResultCode(xdrData: &xdrData)
      self = .invalidPayment(data)
    default:
      throw XDRErrors.unknownEnumCase
    }
  }
}
