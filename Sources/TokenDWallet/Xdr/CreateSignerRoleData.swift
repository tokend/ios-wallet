// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

import Foundation

// === xdr source ============================================================

//  //: CreateSignerRoleData is used to pass necessary params to create a new signer role
//  struct CreateSignerRoleData
//  {
//      //: Array of ids of existing, unique and not default rules
//      uint64 ruleIDs<>;
//      //: Indicates whether or not a rule can be modified in the future
//      bool isReadOnly;
//      //: Arbitrary stringified json object with details to attach to the role
//      longstring details;
//  
//      //: reserved for future use
//      union switch (LedgerVersion v)
//      {
//      case EMPTY_VERSION:
//          void;
//      } ext;
//  };

//  ===========================================================================
public struct CreateSignerRoleData: XDRCodable {
  public var ruleIDs: [Uint64]
  public var isReadOnly: Bool
  public var details: Longstring
  public var ext: CreateSignerRoleDataExt

  public init(
      ruleIDs: [Uint64],
      isReadOnly: Bool,
      details: Longstring,
      ext: CreateSignerRoleDataExt) {

    self.ruleIDs = ruleIDs
    self.isReadOnly = isReadOnly
    self.details = details
    self.ext = ext
  }

  public func toXDR() -> Data {
    var xdr = Data()

    xdr.append(self.ruleIDs.toXDR())
    xdr.append(self.isReadOnly.toXDR())
    xdr.append(self.details.toXDR())
    xdr.append(self.ext.toXDR())

    return xdr
  }

  public init(xdrData: inout Data) throws {
    let lengthruleIDs = try Int32(xdrData: &xdrData)
    self.ruleIDs = [Uint64]()
    for _ in 1...lengthruleIDs {
      self.ruleIDs.append(try Uint64(xdrData: &xdrData))
    }
    self.isReadOnly = try Bool(xdrData: &xdrData)
    self.details = try Longstring(xdrData: &xdrData)
    self.ext = try CreateSignerRoleDataExt(xdrData: &xdrData)
  }

  public enum CreateSignerRoleDataExt: XDRDiscriminatedUnion {
    case emptyVersion()

    public var discriminant: Int32 {
      switch self {
      case .emptyVersion: return LedgerVersion.emptyVersion.rawValue
      }
    }

    public func toXDR() -> Data {
      var xdr = Data()

      xdr.append(self.discriminant.toXDR())

      switch self {
      case .emptyVersion(): xdr.append(Data())
      }

      return xdr
    }

    public init(xdrData: inout Data) throws {
      let discriminant = try Int32(xdrData: &xdrData)

      switch discriminant {
      case LedgerVersion.emptyVersion.rawValue: self = .emptyVersion()
      default:
        throw XDRErrors.unknownEnumCase
      }
    }

  }
}
